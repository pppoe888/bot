from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from config import BOT_TOKEN
from handlers.auth import start, handle_contact, create_admin
from handlers.driver import start_shift
from handlers.delivery import delivery_list
from handlers.admin import admin_panel
from handlers.admin_actions import handle_admin_text
from handlers.chat import chat
from handlers.parking import parking_check
from handlers.report import report

async def block_media(update, context):
    """Blocks media messages and informs the user."""
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!")

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("create_admin", create_admin))
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries (inline –∫–Ω–æ–ø–∫–∏)
    from handlers.admin import manage_drivers, manage_cars
    
    app.add_handler(CallbackQueryHandler(admin_panel, pattern="^admin_panel$"))
    app.add_handler(CallbackQueryHandler(manage_drivers, pattern="^manage_drivers$"))
    app.add_handler(CallbackQueryHandler(manage_cars, pattern="^manage_cars$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    async def handle_add_driver(update, context):
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è:")
        context.user_data["admin_action"] = "adding_driver"
        context.user_data["driver_data"] = {}
    
    async def handle_add_car(update, context):
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:")
        context.user_data["admin_action"] = "adding_car"
        context.user_data["car_data"] = {}
    
    app.add_handler(CallbackQueryHandler(handle_add_driver, pattern="^add_driver$"))
    app.add_handler(CallbackQueryHandler(handle_add_car, pattern="^add_car$"))
    
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback queries
    app.add_handler(CallbackQueryHandler(admin_panel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üõ†Ô∏è –ê–¥–º–∏–Ω–∫–∞"), admin_panel))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üöõ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"), start_shift))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üì¶ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏"), delivery_list))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üí¨ –ß–∞—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π"), chat))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üÖøÔ∏è –°—Ç–æ—è–Ω–∫–∞"), parking_check))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üìä –û—Ç—á—ë—Ç —Å–º–µ–Ω"), report))

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–æ—Ç–æ –∏ —Ñ–∞–π–ª–æ–≤
    app.add_handler(MessageHandler(filters.PHOTO, block_media))
    app.add_handler(MessageHandler(filters.Document.ALL, block_media))
    app.add_handler(MessageHandler(filters.VIDEO, block_media))
    app.add_handler(MessageHandler(filters.AUDIO, block_media))
    app.add_handler(MessageHandler(filters.VOICE, block_media))
    app.add_handler(MessageHandler(filters.VIDEO_NOTE, block_media))
    app.add_handler(MessageHandler(filters.Sticker.ALL, block_media))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–¥ –æ–±—â–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_text))
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()