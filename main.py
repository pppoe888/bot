from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from config import BOT_TOKEN
from handlers.auth import start, handle_contact, create_admin
from handlers.driver import start_shift
from handlers.delivery import delivery_list
from handlers.admin import admin_panel, manage_drivers, manage_cars
from handlers.admin_actions import handle_admin_text, handle_add_driver, handle_add_car
from handlers.chat import chat, write_message, send_message_to_chat, refresh_chat
from handlers.parking import parking_check
from handlers.report import report

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if update.message:
            await update.message.delete()
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5)
        message_ids_to_delete = context.user_data.get("message_history", [])
        for msg_id in message_ids_to_delete[-5:]:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=msg_id
                )
            except:
                continue
        
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        context.user_data["message_history"] = []
        
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        pass

async def save_message_to_history(context, message_id):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
    if "message_history" not in context.user_data:
        context.user_data["message_history"] = []
    
    context.user_data["message_history"].append(message_id)
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if len(context.user_data["message_history"]) > 10:
        context.user_data["message_history"] = context.user_data["message_history"][-10:]

async def block_media(update, context):
    """–ë–ª–æ–∫–∏—Ä—É–µ—Ç –º–µ–¥–∏–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await delete_previous_messages(update, context)
    message = await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–∞!")
    context.user_data["last_message_id"] = message.message_id

async def handle_back_button(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    from config import ADMIN_ID
    from keyboards import get_admin_menu, get_driver_menu
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(update, context)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    context.user_data.clear()
    
    if update.effective_user.id == ADMIN_ID:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_menu()
        )
    else:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üì± –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=get_driver_menu()
        )
    
    context.user_data["last_message_id"] = message.message_id

async def handle_confirm_button(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'"""
    admin_action = context.user_data.get("admin_action")
    
    if admin_action == "adding_driver":
        await confirm_add_driver(update, context)
    elif admin_action == "adding_car":
        await confirm_add_car(update, context)
    else:
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
        )
        context.user_data["last_message_id"] = message.message_id

async def handle_cancel_button(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∏—Ç—å'"""
    from config import ADMIN_ID
    from keyboards import get_admin_menu, get_driver_menu
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    await delete_previous_messages(update, context)
    
    context.user_data.clear()
    
    if update.effective_user.id == ADMIN_ID:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_admin_menu()
        )
    else:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=get_driver_menu()
        )
    
    context.user_data["last_message_id"] = message.message_id

async def confirm_add_driver(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    from database import SessionLocal, User
    from keyboards import get_admin_menu
    
    driver_data = context.user_data.get("driver_data", {})
    
    if not driver_data.get("name") or not driver_data.get("phone"):
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã"
        )
        context.user_data["last_message_id"] = message.message_id
        return
    
    db = SessionLocal()
    try:
        new_driver = User(
            name=driver_data["name"],
            phone=driver_data["phone"],
            role="driver"
        )
        db.add(new_driver)
        db.commit()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_previous_messages(update, context)
        
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver_data['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_admin_menu()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
        
    except Exception as e:
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}"
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def confirm_add_car(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"""
    from database import SessionLocal, Car
    from keyboards import get_admin_menu
    
    car_data = context.user_data.get("car_data", {})
    
    if not car_data.get("number"):
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –Ω–µ –≤–≤–µ–¥–µ–Ω"
        )
        context.user_data["last_message_id"] = message.message_id
        return
    
    db = SessionLocal()
    try:
        new_car = Car(
            number=car_data["number"],
            model=car_data.get("model", "")
        )
        db.add(new_car)
        db.commit()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        await delete_previous_messages(update, context)
        
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ –ú–∞—à–∏–Ω–∞ {car_data['number']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=get_admin_menu()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
        
    except Exception as e:
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}"
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("create_admin", create_admin))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries (inline –∫–Ω–æ–ø–∫–∏)
    app.add_handler(CallbackQueryHandler(admin_panel, pattern="^admin_panel$"))
    app.add_handler(CallbackQueryHandler(manage_drivers, pattern="^manage_drivers$"))
    app.add_handler(CallbackQueryHandler(manage_cars, pattern="^manage_cars$"))
    app.add_handler(CallbackQueryHandler(handle_add_driver, pattern="^add_driver$"))
    app.add_handler(CallbackQueryHandler(handle_add_car, pattern="^add_car$"))
    
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback queries
    app.add_handler(CallbackQueryHandler(admin_panel))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–≤—ã–º–∏)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), handle_back_button))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), handle_confirm_button))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"), handle_cancel_button))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^(üõ†Ô∏è|üöõ|üì¶|üí¨|üÖøÔ∏è|üìä|‚¨ÖÔ∏è|‚úÖ|‚ùå|‚úçÔ∏è|üîÑ)"), send_message_to_chat))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND & ~filters.Regex("^(üõ†Ô∏è|üöõ|üì¶|üí¨|üÖøÔ∏è|üìä|‚¨ÖÔ∏è|‚úÖ|‚ùå|‚úçÔ∏è|üîÑ)"), handle_admin_text))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üõ†Ô∏è –ê–¥–º–∏–Ω–∫–∞"), admin_panel))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üöõ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"), start_shift))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üì¶ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏"), delivery_list))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üí¨ –ß–∞—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π"), chat))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üÖøÔ∏è –°—Ç–æ—è–Ω–∫–∞"), parking_check))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üìä –û—Ç—á—ë—Ç —Å–º–µ–Ω"), report))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —á–∞—Ç–∞
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"), write_message))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"), refresh_chat))

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
    app.add_handler(MessageHandler(filters.PHOTO, block_media))
    app.add_handler(MessageHandler(filters.Document.ALL, block_media))
    app.add_handler(MessageHandler(filters.VIDEO, block_media))
    app.add_handler(MessageHandler(filters.AUDIO, block_media))
    app.add_handler(MessageHandler(filters.VOICE, block_media))
    app.add_handler(MessageHandler(filters.VIDEO_NOTE, block_media))
    app.add_handler(MessageHandler(filters.Sticker.ALL, block_media))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()