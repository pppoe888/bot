from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes
from config import BOT_TOKEN, ADMIN_ID
from handlers.auth import start, handle_contact, create_admin, handle_role_selection
from keyboards import get_role_selection, get_admin_menu, get_driver_menu, get_logist_menu
from handlers.driver import start_shift, select_car
from handlers.delivery import delivery_list
from handlers.admin import admin_panel, manage_drivers, manage_cars, manage_logists, admin_stats
from handlers.admin_actions import handle_admin_text, handle_add_driver, handle_add_logist, handle_add_car, handle_confirm
from handlers.chat import chat, write_message, send_message_to_chat, refresh_chat
from handlers.parking import parking_check
from handlers.report import report
import states
from database import SessionLocal, User, Car

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        if update.message:
            await update.message.delete()
    except:
        pass

async def handle_back_button(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    user_id = update.effective_user.id

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.clear()

    # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω
    if user_id == ADMIN_ID:
        keyboard = get_admin_menu()
        text = "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
        message = await update.message.reply_text(text, reply_markup=keyboard)
        context.user_data["last_message_id"] = message.message_id
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()

        if user:
            if user.role == "driver":
                keyboard = get_driver_menu()
                text = f"üöõ –ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è"
            elif user.role == "logist":
                keyboard = get_logist_menu()
                text = f"üìã –ú–µ–Ω—é –ª–æ–≥–∏—Å—Ç–∞"
            else:
                keyboard = get_role_selection()
                text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:"

            message = await update.message.reply_text(text, reply_markup=keyboard)
            context.user_data["last_message_id"] = message.message_id
        else:
            await start(update, context)
    finally:
        db.close()

async def handle_text_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    current_state = context.user_data.get("state")
    if current_state == "writing_message":
        await send_message_to_chat(update, context, text)
        return
    elif current_state in [states.ADDING_DRIVER, states.ADDING_LOGIST, states.ADDING_CAR]:
        await handle_admin_text(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    if text in ["üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "üìã –õ–æ–≥–∏—Å—Ç", "üöõ –í–æ–¥–∏—Ç–µ–ª—å"]:
        await handle_role_selection(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await handle_back_button(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è
    if text == "üöõ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É":
        await start_shift(update, context)
        return
    elif text == "üì¶ –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫":
        await delivery_list(update, context)
        return
    elif text == "üí¨ –ß–∞—Ç":
        await chat(update, context)
        return
    elif text == "üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–∫–∞":
        await parking_check(update, context)
        return
    elif text == "üìä –û—Ç—á–µ—Ç":
        await report(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ª–æ–≥–∏—Å—Ç–∞
    if text == "üì¶ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏":
        await delivery_list(update, context)
        return
    elif text == "üí¨ –ß–∞—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π":
        await chat(update, context)
        return
    elif text == "üìä –û—Ç—á—ë—Ç —Å–º–µ–Ω":
        await report(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞
    if text == "‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await write_message(update, context)
        return
    elif text == "üîÑ –û–±–Ω–æ–≤–∏—Ç—å":
        await refresh_chat(update, context)
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ
    await delete_previous_messages(update, context)
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."
    )
    context.user_data["last_message_id"] = message.message_id

async def block_media(update, context):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
    await delete_previous_messages(update, context)
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    context.user_data["last_message_id"] = message.message_id

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("create_admin", create_admin))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    application.add_handler(MessageHandler(filters.CONTACT, handle_contact))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries (inline –∫–Ω–æ–ø–∫–∏)
    application.add_handler(CallbackQueryHandler(admin_panel, pattern="^admin_panel$"))
    application.add_handler(CallbackQueryHandler(manage_drivers, pattern="^manage_drivers$"))
    application.add_handler(CallbackQueryHandler(manage_cars, pattern="^manage_cars$"))
    application.add_handler(CallbackQueryHandler(manage_logists, pattern="^manage_logists$"))
    application.add_handler(CallbackQueryHandler(admin_stats, pattern="^admin_stats$"))
    application.add_handler(CallbackQueryHandler(handle_add_driver, pattern="^add_driver$"))
    application.add_handler(CallbackQueryHandler(handle_add_logist, pattern="^add_logist$"))
    application.add_handler(CallbackQueryHandler(handle_add_car, pattern="^add_car$"))
    application.add_handler(CallbackQueryHandler(handle_confirm, pattern="^confirm$"))
    application.add_handler(CallbackQueryHandler(select_car, pattern="^select_car_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_messages))

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
    application.add_handler(MessageHandler(
        filters.PHOTO | filters.VIDEO | filters.AUDIO | filters.DOCUMENT | 
        filters.VOICE | filters.VIDEO_NOTE | filters.STICKER | filters.ANIMATION,
        block_media
    ))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()