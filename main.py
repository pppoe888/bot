from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from config import BOT_TOKEN
from handlers.auth import start, handle_contact, create_admin, handle_role_selection
from keyboards import get_role_selection, get_admin_menu
from handlers.driver import start_shift, select_car
from handlers.delivery import delivery_list
from handlers.admin import admin_panel, manage_drivers, manage_cars, manage_logists, admin_stats
from handlers.admin_actions import handle_admin_text, handle_add_driver, handle_add_logist, handle_add_car, handle_confirm
from handlers.chat import chat, write_message, send_message_to_chat, refresh_chat
from handlers.parking import parking_check
from handlers.report import report
from states import WAITING_ROLE_SELECTION
from database import SessionLocal, User, Car

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        if update.message:
            await update.message.delete()
    except:
        pass

async def handle_back_button(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    from keyboards import get_driver_menu, get_logist_menu

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()

    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db = SessionLocal()
    user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()

    if user:
        if user.role == "admin":
            keyboard = get_admin_menu()
            text = "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"
        elif user.role == "driver":
            keyboard = get_driver_menu()
            text = "üöõ –ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è"
        elif user.role == "logist":
            keyboard = get_logist_menu()
            text = "üìã –ú–µ–Ω—é –ª–æ–≥–∏—Å—Ç–∞"
        else:
            keyboard = get_role_selection()
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:"
    else:
        keyboard = get_role_selection()
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:"

    db.close()

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=keyboard
    )
    context.user_data["last_message_id"] = message.message_id

async def block_media(update, context):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤"""
    await delete_previous_messages(update, context)
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
    )
    context.user_data["last_message_id"] = message.message_id

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ (–≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("create_admin", create_admin))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    app.add_handler(MessageHandler(filters.CONTACT, handle_contact))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback queries (inline –∫–Ω–æ–ø–∫–∏)
    app.add_handler(CallbackQueryHandler(admin_panel, pattern="^admin_panel$"))
    app.add_handler(CallbackQueryHandler(manage_drivers, pattern="^manage_drivers$"))
    app.add_handler(CallbackQueryHandler(manage_cars, pattern="^manage_cars$"))
    app.add_handler(CallbackQueryHandler(manage_logists, pattern="^manage_logists$"))
    app.add_handler(CallbackQueryHandler(admin_stats, pattern="^admin_stats$"))
    app.add_handler(CallbackQueryHandler(handle_add_driver, pattern="^add_driver$"))
    app.add_handler(CallbackQueryHandler(handle_add_logist, pattern="^add_logist$"))
    app.add_handler(CallbackQueryHandler(handle_add_car, pattern="^add_car$"))
    app.add_handler(CallbackQueryHandler(handle_confirm, pattern="^confirm$"))
    app.add_handler(CallbackQueryHandler(handle_back_button, pattern="^back_to_menu$"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã
    app.add_handler(CallbackQueryHandler(select_car, pattern="^select_car_"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    app.add_handler(MessageHandler(
        filters.TEXT & filters.Regex("^(üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä|üìã –õ–æ–≥–∏—Å—Ç|üöõ –í–æ–¥–∏—Ç–µ–ª—å)$"), 
        handle_role_selection
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ–¥ –∞–¥–º–∏–Ω—Å–∫–∏–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏)
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üõ†Ô∏è –ê–¥–º–∏–Ω–∫–∞"), admin_panel))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üöõ –ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"), start_shift))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üì¶ –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫"), delivery_list))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üí¨ –ß–∞—Ç"), chat))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üÖøÔ∏è –ü–∞—Ä–∫–æ–≤–∫–∞"), parking_check))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üìä –û—Ç—á–µ—Ç"), report))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"), handle_back_button))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é)
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.Regex("^(üõ†Ô∏è|üöõ|üì¶|üí¨|üÖøÔ∏è|üìä|‚¨ÖÔ∏è|‚úÖ|‚ùå|‚úçÔ∏è|üîÑ|üë®‚Äçüíº|üìã)") & ~filters.Regex("^(–í–æ–¥–∏—Ç–µ–ª—å|–õ–æ–≥–∏—Å—Ç|–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)"), 
        handle_admin_text
    ))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞
    app.add_handler(CallbackQueryHandler(write_message, pattern="^write_message$"))
    app.add_handler(CallbackQueryHandler(send_message_to_chat, pattern="^send_to_chat$"))
    app.add_handler(CallbackQueryHandler(refresh_chat, pattern="^refresh_chat$"))

    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–µ–¥–∏–∞
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO | filters.AUDIO | filters.Document.ALL | filters.Sticker.ALL, block_media))

    app.run_polling()

if __name__ == "__main__":
    main()