from telegram import Update
from telegram.ext import ContextTypes
from database import SessionLocal, User, ChatMessage
from keyboards import get_chat_menu, get_back_keyboard
from states import WRITING_MESSAGE
from datetime import datetime

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        if update.message:
            await update.message.delete()
    except:
        pass

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞"""
    await delete_previous_messages(update, context)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()

        if not user:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )
            context.user_data["last_message_id"] = message.message_id
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = db.query(ChatMessage).order_by(ChatMessage.timestamp.desc()).limit(10).all()
        messages.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

        if not messages:
            chat_text = "üí¨ –ß–∞—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π\n\nüìù –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
        else:
            chat_text = "üí¨ –ß–∞—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π\n\n"
            for msg in messages:
                time_str = msg.timestamp.strftime("%H:%M")
                role_emoji = "üëë" if msg.user.role == "admin" else "üöõ"
                chat_text += f"{role_emoji} {msg.user.name} ({time_str}):\n{msg.message}\n\n"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=chat_text,
            reply_markup=get_chat_menu()
        )
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def write_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Ä–µ–∂–∏–º –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await delete_previous_messages(update, context)

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=get_back_keyboard()
    )
    context.user_data["state"] = WRITING_MESSAGE
    context.user_data["last_message_id"] = message.message_id

async def send_message_to_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
    if context.user_data.get("state") != WRITING_MESSAGE:
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()

        if not user:
            await delete_previous_messages(update, context)
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
            )
            context.user_data["last_message_id"] = message.message_id
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É
        new_message = ChatMessage(
            user_id=user.id,
            message=update.message.text,
            timestamp=datetime.now()
        )

        db.add(new_message)
        db.commit()

        await delete_previous_messages(update, context)

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç!",
            reply_markup=get_chat_menu()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞: {e}"
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def refresh_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–∏—Ç—å —á–∞—Ç"""
    await chat(update, context)