
from telegram import Update
from telegram.ext import ContextTypes
from database import SessionLocal, User, ChatMessage
from datetime import datetime
from keyboards import get_chat_keyboard
from states import WRITING_MESSAGE

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        if update.message:
            await update.message.delete()
    except:
        pass

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —á–∞—Ç–∞"""
    await delete_previous_messages(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    db = SessionLocal()
    user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
    
    if not user:
        db.close()
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        context.user_data["last_message_id"] = message.message_id
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = db.query(ChatMessage).order_by(ChatMessage.timestamp.desc()).limit(10).all()
    messages.reverse()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    
    if not messages:
        chat_text = "üí¨ –ß–∞—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π\n\nüìù –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        chat_text = "üí¨ –ß–∞—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π\n\n"
        for msg in messages:
            time_str = msg.timestamp.strftime("%H:%M")
            role_emoji = "üëë" if msg.user.role == "admin" else "üöõ"
            chat_text += f"{role_emoji} {msg.user.name} ({time_str}):\n{msg.message}\n\n"
    
    db.close()
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=chat_text,
        reply_markup=get_chat_keyboard()
    )
    context.user_data["last_message_id"] = message.message_id

async def write_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await delete_previous_messages(update, context)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=get_chat_keyboard(mode="cancel")
    )
    context.user_data["last_message_id"] = message.message_id
    context.user_data["state"] = WRITING_MESSAGE

async def send_message_to_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if context.user_data.get("state") != WRITING_MESSAGE:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–Ω–æ–ø–∫–∞
    message_text = update.message.text
    if message_text.startswith(("üõ†Ô∏è", "üöõ", "üì¶", "üí¨", "üÖøÔ∏è", "üìä", "‚¨ÖÔ∏è", "‚úÖ", "‚ùå", "‚úçÔ∏è", "üîÑ")):
        return
    
    await delete_previous_messages(update, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    db = SessionLocal()
    user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
    
    if not user:
        db.close()
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        )
        context.user_data["last_message_id"] = message.message_id
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    new_message = ChatMessage(
        user_id=user.id,
        message=update.message.text,
        timestamp=datetime.now()
    )
    
    db.add(new_message)
    db.commit()
    db.close()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    context.user_data.pop("state", None)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç!",
        reply_markup=get_chat_keyboard()
    )
    context.user_data["last_message_id"] = message.message_id

async def refresh_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞"""
    await chat(update, context)
