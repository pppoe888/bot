from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from database import SessionLocal, User
from keyboards import get_driver_menu, get_admin_menu, get_phone_button
from states import WAITING_PHONE

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import ADMIN_ID

    db = SessionLocal()
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        if update.effective_user.id == ADMIN_ID:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω –≤ –±–∞–∑–µ
            admin_user = db.query(User).filter(User.telegram_id == ADMIN_ID).first()
            
            if not admin_user:
                # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                admin_user = User(
                    telegram_id=ADMIN_ID,
                    phone="admin",
                    name=update.effective_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                    role="admin"
                )
                db.add(admin_user)
                db.commit()
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            try:
                if context.user_data.get("last_message_id"):
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data["last_message_id"]
                    )
                await update.message.delete()
            except:
                pass
                
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_user.name}!",
                reply_markup=get_admin_menu()
            )
            context.user_data.clear()
            context.user_data["last_message_id"] = message.message_id
            
        else:
            # –≠—Ç–æ –Ω–µ –∞–¥–º–∏–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            
            if user and user.role == "driver":
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                try:
                    await update.message.delete()
                except:
                    pass
                    
                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.name}!",
                    reply_markup=get_driver_menu()
                )
                context.user_data["last_message_id"] = message.message_id
                context.user_data.clear()
            else:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                try:
                    await update.message.delete()
                except:
                    pass
                    
                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                    reply_markup=get_phone_button()
                )
                context.user_data["last_message_id"] = message.message_id
                context.user_data["state"] = WAITING_PHONE
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        db.close()

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import ADMIN_ID
    
    # –ê–¥–º–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if update.effective_user.id == ADMIN_ID:
        await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.")
        return

    contact = update.message.contact
    phone = contact.phone_number
    user_id = update.effective_user.id

    db = SessionLocal()

    # –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    user = db.query(User).filter(User.phone == phone, User.role == "driver").first()

    if user:
        # –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º telegram_id
        user.telegram_id = user_id
        db.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏
        user_name = user.name
        db.close()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            if context.user_data.get("last_message_id"):
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data["last_message_id"]
                )
            await update.message.delete()
        except:
            pass
            
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!",
            reply_markup=get_driver_menu()
        )
        context.user_data["last_message_id"] = message.message_id
        context.user_data.clear()
    else:
        db.close()
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await update.message.delete()
        except:
            pass
        
        from keyboards import get_back_keyboard
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É.",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

async def create_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import ADMIN_ID
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    db = SessionLocal()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
    admin = db.query(User).filter(User.telegram_id == update.effective_user.id).first()

    if admin:
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        admin_user = User(
            telegram_id=update.effective_user.id,
            phone="admin",
            name=update.effective_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            role="admin"
        )
        db.add(admin_user)
        db.commit()
        await update.message.reply_text("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω!")

    db.close()

    await update.message.reply_text(
        "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞",
        reply_markup=get_admin_menu()
    )