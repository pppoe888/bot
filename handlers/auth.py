from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from database import SessionLocal, User
from keyboards import get_role_selection, get_contact_inline_keyboard
from config import ADMIN_ID

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id == ADMIN_ID:
        keyboard = get_role_selection()
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ö–æ–¥:"
        
        if update.message:
            message = await update.message.reply_text(text, reply_markup=keyboard)
        else:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=keyboard
            )
        context.user_data["last_message_id"] = message.message_id
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
    db = SessionLocal()
    try:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        existing_user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if existing_user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, —Å—Ä–∞–∑—É –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
            user_name = existing_user.name
            user_role = existing_user.role

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            try:
                if context.user_data.get("last_message_id"):
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id,
                        message_id=context.user_data["last_message_id"]
                    )
                if update.message:
                    await update.message.delete()
            except:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –º–µ–Ω—é
            if user_role == "driver":
                from keyboards import get_driver_dialog_keyboard
                keyboard = get_driver_dialog_keyboard()
                text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            elif user_role == "logist":
                from keyboards import get_logist_dialog_keyboard
                keyboard = get_logist_dialog_keyboard()
                text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n–í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ª–æ–≥–∏—Å—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            else:
                keyboard = get_role_selection()
                text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:"

            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=keyboard
            )
            context.user_data.clear()
            context.user_data["last_message_id"] = message.message_id
            return

    finally:
        db.close()

    # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
    keyboard = get_role_selection()
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ö–æ–¥:"
    
    if update.message:
        message = await update.message.reply_text(text, reply_markup=keyboard)
    else:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=keyboard
        )
    context.user_data["last_message_id"] = message.message_id

async def create_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id

    if user_id != ADMIN_ID:
        if update.message:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
        return

    if update.message:
        await update.message.reply_text("–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!"
        )

async def setup_admin_roles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id

    if user_id != ADMIN_ID:
        if update.message:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã."
            )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_name = update.effective_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    if update.effective_user.last_name:
        user_name += f" {update.effective_user.last_name}"

    # –ü—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    text = (f"üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –≤–æ–¥–∏—Ç–µ–ª—è –∏ –ª–æ–≥–∏—Å—Ç–∞.\n\n"
            f"–≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –ª–æ–≥–∏—Å—Ç —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n"
            f"üí° –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:\n"
            f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìé (—Å–∫—Ä–µ–ø–∫–∞)\n"
            f"2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '–ö–æ–Ω—Ç–∞–∫—Ç'\n"
            f"3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç\n"
            f"4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'")
    
    if update.message:
        message = await update.message.reply_text(text, reply_markup=get_role_selection())
    else:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_role_selection()
        )
    context.user_data["setup_admin"] = True
    context.user_data["last_message_id"] = message.message_id

async def handle_role_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    query = update.callback_query
    await query.answer()

    selected_role = query.data.replace("role_", "")
    context.user_data["selected_role"] = selected_role

    if selected_role == "admin":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if update.effective_user.id == ADMIN_ID:
            from keyboards import get_admin_inline_keyboard
            text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
            try:
                await query.edit_message_text(text=text, reply_markup=get_admin_inline_keyboard())
            except:
                message = await query.message.reply_text(text=text, reply_markup=get_admin_inline_keyboard())
                context.user_data["last_message_id"] = message.message_id
        else:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ä–æ–ª—å:"
            try:
                await query.edit_message_text(text=text, reply_markup=get_role_selection())
            except:
                message = await query.message.reply_text(text=text, reply_markup=get_role_selection())
                context.user_data["last_message_id"] = message.message_id
        return

    role_display = "–≤–æ–¥–∏—Ç–µ–ª—å" if selected_role == "driver" else "–ª–æ–≥–∏—Å—Ç"

    text = f"–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞–∫ {role_display} –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º"
    
    try:
        await query.edit_message_text(text=text, reply_markup=get_contact_inline_keyboard())
    except:
        message = await query.message.reply_text(text=text, reply_markup=get_contact_inline_keyboard())
        context.user_data["last_message_id"] = message.message_id

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    contact = update.message.contact
    phone = contact.phone_number
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if context.user_data.get("setup_admin") and user_id == ADMIN_ID:
        from handlers.admin_actions import create_admin_entries
        
        user_name = update.effective_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        if update.effective_user.last_name:
            user_name += f" {update.effective_user.last_name}"

        success = await create_admin_entries(phone, user_name)
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            if context.user_data.get("last_message_id"):
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data["last_message_id"]
                )
            await update.message.delete()
        except:
            pass

        if success:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚úÖ –ó–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞–Ω—ã!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å –∏–ª–∏ –ª–æ–≥–∏—Å—Ç —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=get_role_selection()
            )
        else:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                reply_markup=get_role_selection()
            )
            
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
        return

    selected_role = context.user_data.get("selected_role", "driver")
    db = SessionLocal()

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - –ø–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    phone_digits = ''.join(filter(str.isdigit, phone))
    
    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Ä–æ–ª–∏
    user = db.query(User).filter(
        User.phone == phone, 
        User.role == selected_role
    ).first()
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º
    if not user:
        users_with_role = db.query(User).filter(User.role == selected_role).all()
        for u in users_with_role:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ –Ω–æ–º–µ—Ä–∞ –≤ –±–∞–∑–µ
            u_phone_digits = ''.join(filter(str.isdigit, u.phone))
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
            if u_phone_digits == phone_digits:
                user = u
                break

    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º telegram_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user.telegram_id != user_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º telegram_id
            existing_user = db.query(User).filter(User.telegram_id == user_id).first()
            if existing_user and existing_user.id != user.id:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id, –æ—á–∏—â–∞–µ–º –µ–≥–æ
                existing_user.telegram_id = None
                db.commit()
            
            user.telegram_id = user_id
            db.commit()

        user_name = user.name
        user_role = user.role
        db.close()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            if context.user_data.get("last_message_id"):
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data["last_message_id"]
                )
            await update.message.delete()
        except:
            pass

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –º–µ–Ω—é
        if user_role == "driver":
            from keyboards import get_driver_dialog_keyboard
            keyboard = get_driver_dialog_keyboard()
            text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        elif user_role == "logist":
            from keyboards import get_logist_dialog_keyboard
            keyboard = get_logist_dialog_keyboard()
            text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –ª–æ–≥–∏—Å—Ç.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            keyboard = get_role_selection()
            text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=keyboard
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
        db.close()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            if context.user_data.get("last_message_id"):
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data["last_message_id"]
                )
            await update.message.delete()
        except:
            pass

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        role_display = "–≤–æ–¥–∏—Ç–µ–ª—å" if selected_role == "driver" else "–ª–æ–≥–∏—Å—Ç"
        debug_users = db.query(User).filter(User.role == selected_role).all()
        
        debug_text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {phone} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–æ–ª–∏ '{role_display}'.\n\n"
        
        if debug_users:
            debug_text += f"üìã –ù–∞–π–¥–µ–Ω–æ {len(debug_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é '{role_display}':\n"
            for debug_user in debug_users[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö 5
                debug_text += f"‚Ä¢ {debug_user.name} ({debug_user.phone})\n"
            if len(debug_users) > 5:
                debug_text += f"... –∏ –µ—â–µ {len(debug_users) - 5} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        else:
            debug_text += f"üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ä–æ–ª—å—é '{role_display}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
        
        debug_text += f"\nüí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=debug_text,
            reply_markup=get_role_selection()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

def get_contact_instruction_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç—É"""
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = [
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_roles")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def handle_contact_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    text = """üì± –ö–∞–∫ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:

1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É üìé (—Å–∫—Ä–µ–ø–∫–∞) –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ "–ö–æ–Ω—Ç–∞–∫—Ç" 
3Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"

‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç –≤–∞—Å –≤ –±–∞–∑–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ—Ç."""
    
    try:
        await query.edit_message_text(text=text, reply_markup=get_contact_instruction_keyboard())
    except:
        message = await query.message.reply_text(text=text, reply_markup=get_contact_instruction_keyboard())
        context.user_data["last_message_id"] = message.message_id
