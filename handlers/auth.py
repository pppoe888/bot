from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from database import SessionLocal, User
from keyboards import (get_driver_menu, get_admin_menu, get_logist_menu, 
                      get_phone_button, get_role_selection)
from states import WAITING_PHONE, WAITING_ROLE_SELECTION

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import ADMIN_ID

    db = SessionLocal()

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            if context.user_data.get("last_message_id"):
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data["last_message_id"]
                )
            await update.message.delete()
        except:
            pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()

        if user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
            if user.role == "admin":
                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.name}!",
                    reply_markup=get_admin_menu()
                )
            elif user.role == "driver":
                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≤–æ–¥–∏—Ç–µ–ª—å {user.name}!",
                    reply_markup=get_driver_menu()
                )
            elif user.role == "logist":
                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ª–æ–≥–∏—Å—Ç {user.name}!",
                    reply_markup=get_logist_menu()
                )
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å
                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    reply_markup=get_role_selection()
                )
                context.user_data["state"] = WAITING_ROLE_SELECTION
        else:
            # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
                reply_markup=get_role_selection()
            )
            context.user_data["state"] = WAITING_ROLE_SELECTION

        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ start: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        db.close()

async def handle_role_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    from config import ADMIN_ID

    if context.user_data.get("state") != WAITING_ROLE_SELECTION:
        return

    text = update.message.text
    selected_role = None

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        await update.message.delete()
    except:
        pass

    if text == "üë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Å—Ç–æ—è—â–∏–º –∞–¥–º–∏–Ω–æ–º
        if update.effective_user.id == ADMIN_ID:
            db = SessionLocal()
            admin_user = db.query(User).filter(User.telegram_id == ADMIN_ID).first()

            if not admin_user:
                # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∞
                admin_user = User(
                    telegram_id=ADMIN_ID,
                    phone="admin",
                    name=update.effective_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                    role="admin"
                )
                db.add(admin_user)
                db.commit()
                db.refresh(admin_user)

            admin_name = admin_user.name
            db.close()

            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin_name}!",
                reply_markup=get_admin_menu()
            )
            context.user_data.clear()
            context.user_data["last_message_id"] = message.message_id
        else:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ä–æ–ª—å:",
                reply_markup=get_role_selection()
            )
            context.user_data["last_message_id"] = message.message_id

    elif text == "üìã –õ–æ–≥–∏—Å—Ç":
        selected_role = "logist"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–∏—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_phone_button()
        )
        context.user_data["state"] = WAITING_PHONE
        context.user_data["selected_role"] = selected_role
        context.user_data["last_message_id"] = message.message_id

    elif text == "üöõ –í–æ–¥–∏—Ç–µ–ª—å":
        selected_role = "driver"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
            reply_markup=get_phone_button()
        )
        context.user_data["state"] = WAITING_PHONE
        context.user_data["selected_role"] = selected_role
        context.user_data["last_message_id"] = message.message_id

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import ADMIN_ID

    # –ê–¥–º–∏–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if update.effective_user.id == ADMIN_ID:
        await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    contact = update.message.contact
    phone = contact.phone_number
    user_id = update.effective_user.id
    selected_role = context.user_data.get("selected_role", "driver")

    db = SessionLocal()

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Ä–æ–ª–∏
    user = db.query(User).filter(
        User.phone == phone, 
        User.role == selected_role
    ).first()

    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º telegram_id
        user.telegram_id = user_id
        db.commit()

        user_name = user.name
        user_role = user.role
        db.close()

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            if context.user_data.get("last_message_id"):
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data["last_message_id"]
                )
            await update.message.delete()
        except:
            pass

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        if user_role == "driver":
            keyboard = get_driver_menu()
            role_text = "–≤–æ–¥–∏—Ç–µ–ª—å"
        elif user_role == "logist":
            keyboard = get_logist_menu()
            role_text = "–ª–æ–≥–∏—Å—Ç"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {role_text} {user_name}!",
            reply_markup=keyboard
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    else:
        db.close()
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await update.message.delete()
        except:
            pass

        from keyboards import get_back_keyboard
        role_name = "–ª–æ–≥–∏—Å—Ç" if selected_role == "logist" else "–≤–æ–¥–∏—Ç–µ–ª—å"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {role_name}–æ–≤. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É.",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

async def create_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import ADMIN_ID
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    db = SessionLocal()

    admin = db.query(User).filter(User.telegram_id == update.effective_user.id).first()

    if admin:
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!")
    else:
        admin_user = User(
            telegram_id=update.effective_user.id,
            phone="admin",
            name=update.effective_user.first_name or "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            role="admin"
        )
        db.add(admin_user)
        db.commit()
        await update.message.reply_text("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω!")

    db.close()

    await update.message.reply_text(
        "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞",
        reply_markup=get_admin_menu()
    )