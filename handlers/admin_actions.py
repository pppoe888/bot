from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car, Shift
from keyboards import get_back_keyboard, get_confirm_keyboard, get_admin_inline_keyboard, get_user_list_keyboard, get_edit_user_keyboard, get_manage_drivers_keyboard, get_manage_logists_keyboard, get_manage_cars_keyboard, get_admin_reports_keyboard, get_admin_shifts_keyboard, get_admin_reports_keyboard, get_admin_reports_keyboard, get_car_list_keyboard, get_edit_car_keyboard, get_admin_cars_keyboard, get_admin_reports_keyboard, get_admin_reports_keyboard, get_admin_reports_keyboard, get_cancel_keyboard
import states
from states import ADDING_DRIVER, ADDING_LOGIST, ADDING_CAR, EDITING_DRIVER, EDITING_LOGIST
from config import ADMIN_ID
from datetime import datetime

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        if update.message:
            await update.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def track_admin_message(update, context, message):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∫–∏ –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ"""
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    if context.user_data.get("message_history"):
        for msg_id in context.user_data["message_history"]:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=msg_id
                )
            except:
                pass

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    context.user_data["message_history"] = [message.message_id]
    context.user_data["last_message_id"] = message.message_id

async def handle_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"""
    text = update.message.text
    current_state = context.user_data.get("state")

    if current_state == ADDING_DRIVER:
        await handle_driver_input(update, context, text)
    elif current_state == ADDING_LOGIST:
        await handle_logist_input(update, context, text)
    elif current_state == ADDING_CAR:
        await handle_car_input(update, context, text)
    elif current_state == EDITING_DRIVER:
        await handle_edit_driver_input(update, context, text)
    elif current_state == EDITING_LOGIST:
        await handle_edit_logist_input(update, context, text)
    elif current_state == "EDITING_CAR":
        await handle_edit_car_input(update, context, text)

async def handle_add_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    await delete_previous_messages(update, context)

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=get_cancel_keyboard()
    )
    context.user_data["state"] = ADDING_DRIVER
    context.user_data["driver_data"] = {}
    context.user_data["last_message_id"] = message.message_id

    if update.callback_query:
        await update.callback_query.answer()

async def handle_driver_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if text in ["–û—Ç–º–µ–Ω–∏—Ç—å", "–ù–∞–∑–∞–¥"]:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
        return

    driver_data = context.user_data.get("driver_data", {})

    if "name" not in driver_data:
        driver_data["name"] = text
        context.user_data["driver_data"] = driver_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=get_cancel_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "phone" not in driver_data:
        driver_data["phone"] = text
        context.user_data["driver_data"] = driver_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è:\n\n"
        confirm_text += f"–ò–º—è: {driver_data['name']}\n"
        confirm_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {driver_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        await track_admin_message(update, context, message)

async def handle_add_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    await delete_previous_messages(update, context)

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ª–æ–≥–∏—Å—Ç–∞:",
        reply_markup=get_cancel_keyboard()
    )
    context.user_data["state"] = ADDING_LOGIST
    context.user_data["logist_data"] = {}
    context.user_data["last_message_id"] = message.message_id

    if update.callback_query:
        await update.callback_query.answer()

async def handle_logist_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–∏—Å—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if text in ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
        return

    logist_data = context.user_data.get("logist_data", {})

    if "name" not in logist_data:
        logist_data["name"] = text
        context.user_data["logist_data"] = logist_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ª–æ–≥–∏—Å—Ç–∞:",
            reply_markup=get_cancel_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "phone" not in logist_data:
        logist_data["phone"] = text
        context.user_data["logist_data"] = logist_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏—Å—Ç–∞:\n\n"
        confirm_text += f"üë§ –ò–º—è: {logist_data['name']}\n"
        confirm_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        await track_admin_message(update, context, message)

async def handle_add_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"""
    await delete_previous_messages(update, context)

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:",
        reply_markup=get_cancel_keyboard()
    )
    context.user_data["state"] = ADDING_CAR
    context.user_data["car_data"] = {}
    context.user_data["last_message_id"] = message.message_id

    if update.callback_query:
        await update.callback_query.answer()

async def handle_car_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω—ã"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if text in ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
        return

    car_data = context.user_data.get("car_data", {})

    if "number" not in car_data:
        car_data["number"] = text
        context.user_data["car_data"] = car_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üè≠ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=get_cancel_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "brand" not in car_data:
        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            car_data["brand"] = text
        else:
            car_data["brand"] = ""
        context.user_data["car_data"] = car_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üöô –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=get_cancel_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "model" not in car_data:
        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            car_data["model"] = text
        else:
            car_data["model"] = ""
        context.user_data["car_data"] = car_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã:\n\n"
        confirm_text += f"üöó –ù–æ–º–µ—Ä: {car_data['number']}\n"
        confirm_text += f"üè≠ –ú–∞—Ä–∫–∞: {car_data.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        confirm_text += f"üöô –ú–æ–¥–µ–ª—å: {car_data.get('model', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        await track_admin_message(update, context, message)

async def create_admin_entries(phone: str, name: str = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—è –∏ –ª–æ–≥–∏—Å—Ç–∞"""
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏
        existing_driver = db.query(User).filter(
            User.phone == phone, 
            User.role == "driver"
        ).first()

        existing_logist = db.query(User).filter(
            User.phone == phone, 
            User.role == "logist"
        ).first()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not existing_driver:
            driver = User(
                telegram_id=None,  # –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_id —Å—Ä–∞–∑—É
                name=name,
                phone=phone,
                role="driver"
            )
            db.add(driver)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∏—Å—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not existing_logist:
            logist = User(
                telegram_id=None,  # –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_id —Å—Ä–∞–∑—É
                name=name,
                phone=phone,
                role="logist"
            )
            db.add(logist)

        db.commit()
        return True
    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False
    finally:
        db.close()

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    current_state = context.user_data.get("state")

    if current_state == ADDING_DRIVER:
        await confirm_add_driver(update, context)
    elif current_state == ADDING_LOGIST:
        await confirm_add_logist(update, context)
    elif current_state == ADDING_CAR:
        await confirm_add_car(update, context)

    if update.callback_query:
        await update.callback_query.answer()

async def confirm_add_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_data = context.user_data.get("driver_data", {})

    if not driver_data:
        return

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        existing_user = db.query(User).filter(User.phone == driver_data["phone"]).first()

        if existing_user:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {driver_data['phone']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
            text += f"üë§ –ò–º—è: {existing_user.name}\n"
            text += f"üìã –†–æ–ª—å: {existing_user.role}"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
            new_driver = User(
                name=driver_data["name"],
                phone=driver_data["phone"],
                role="driver"
            )

            db.add(new_driver)
            db.commit()

            text = f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            text += f"üë§ –ò–º—è: {driver_data['name']}\n"
            text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def confirm_add_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    logist_data = context.user_data.get("logist_data", {})

    if not logist_data:
        return

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        existing_user = db.query(User).filter(User.phone == logist_data["phone"]).first()

        if existing_user:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {logist_data['phone']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
            text += f"üë§ –ò–º—è: {existing_user.name}\n"
            text += f"üìã –†–æ–ª—å: {existing_user.role}"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏—Å—Ç–∞
            new_logist = User(
                name=logist_data["name"],
                phone=logist_data["phone"],
                role="logist"
            )

            db.add(new_logist)
            db.commit()

            text = f"‚úÖ –õ–æ–≥–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            text += f"üë§ –ò–º—è: {logist_data['name']}\n"
            text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞: {str(e)}"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def confirm_add_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"""
    car_data = context.user_data.get("car_data", {})

    if not car_data:
        return

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
        existing_car = db.query(Car).filter(Car.number == car_data["number"]).first()

        if existing_car:
            text = f"‚ùå –ú–∞—à–∏–Ω–∞ —Å –Ω–æ–º–µ—Ä–æ–º {car_data['number']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
            text += f"üè≠ –ú–∞—Ä–∫–∞: {existing_car.brand or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            text += f"üöô –ú–æ–¥–µ–ª—å: {existing_car.model or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É
            new_car = Car(
                number=car_data["number"],
                brand=car_data.get("brand", ""),
                model=car_data.get("model", "")
            )

            db.add(new_car)
            db.commit()

            text = f"‚úÖ –ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            text += f"üöó –ù–æ–º–µ—Ä: {car_data['number']}\n"
            text += f"üè≠ –ú–∞—Ä–∫–∞: {car_data.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += f"üöô –ú–æ–¥–µ–ª—å: {car_data.get('model', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: {str(e)}"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–û–î–ò–¢–ï–õ–Ø–ú–ò ===

async def show_drivers_list(update: Update, context: ContextTypes.DEFAULT_TYPE, action_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    await delete_previous_messages(update, context)

    db = SessionLocal()
    try:
        drivers = db.query(User).filter(User.role == "driver").all()

        if not drivers:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_manage_drivers_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id
            return

        action_text = "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" if action_type.startswith("edit") else "—É–¥–∞–ª–µ–Ω–∏—è"
        text = f"üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è {action_text}:"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_user_list_keyboard(drivers, action_type)
        )
        await track_admin_message(update, context, message)

        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    if update.callback_query:
        await update.callback_query.answer()

async def edit_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_id = int(update.callback_query.data.split("_")[2])

    db = SessionLocal()
    try:
        driver = db.query(User).filter(User.id == driver_id).first()

        if not driver:
            await update.callback_query.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        text = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è:\n\n"
        text += f"üë§ –ò–º—è: {driver.name}\n"
        text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"

        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_edit_user_keyboard(driver_id, "driver")
        )
    finally:
        db.close()

    await update.callback_query.answer()

async def delete_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_id = int(update.callback_query.data.split("_")[2])

    db = SessionLocal()
    try:
        driver = db.query(User).filter(User.id == driver_id).first()

        if not driver:
            await update.callback_query.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã
        active_shifts = db.query(Shift).filter(
            Shift.driver_id == driver_id,
            Shift.is_active == True
        ).count()

        if active_shifts > 0:
            text = f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è {driver.name}, —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã!"
        else:
            db.delete(driver)
            db.commit()
            text = f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"

        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_manage_drivers_keyboard()
        )
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}"
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_manage_drivers_keyboard()
        )
    finally:
        db.close()

    await update.callback_query.answer()

async def edit_driver_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    from keyboards import get_cancel_keyboard
    data_parts = update.callback_query.data.split("_")
    field = data_parts[1]  # name –∏–ª–∏ phone
    driver_id = int(data_parts[3])

    context.user_data["state"] = EDITING_DRIVER
    context.user_data["edit_driver_id"] = driver_id
    context.user_data["edit_field"] = field

    field_text = "–∏–º—è" if field == "name" else "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"

    await update.callback_query.edit_message_text(
        text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_text}:",
        reply_markup=get_cancel_keyboard()
    )

    await update.callback_query.answer()

async def handle_edit_driver_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if text in ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_manage_drivers_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
        return

    driver_id = context.user_data.get("edit_driver_id")
    field = context.user_data.get("edit_field")

    if not driver_id or not field:
        return

    db = SessionLocal()
    try:
        driver = db.query(User).filter(User.id == driver_id).first()

        if not driver:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=get_manage_drivers_keyboard()
            )
            context.user_data.clear()
            context.user_data["last_message_id"] = message.message_id
            return

        old_value = getattr(driver, field)
        setattr(driver, field, text)
        db.commit()

        field_text = "–∏–º—è" if field == "name" else "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        text_msg = f"‚úÖ {field_text.capitalize()} –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        text_msg += f"–ë—ã–ª–æ: {old_value}\n"
        text_msg += f"–°—Ç–∞–ª–æ: {text}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text_msg,
            reply_markup=get_manage_drivers_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}",
            reply_markup=get_manage_drivers_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–°–¢–ê–ú–ò ===

async def show_logists_list(update: Update, context: ContextTypes.DEFAULT_TYPE, action_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏—Å—Ç–æ–≤"""
    await delete_previous_messages(update, context)

    db = SessionLocal()
    try:
        logists = db.query(User).filter(User.role == "logist").all()

        if not logists:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –õ–æ–≥–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_manage_logists_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id
            return

        action_text = "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" if action_type.startswith("edit") else "—É–¥–∞–ª–µ–Ω–∏—è"
        text = f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏—Å—Ç–∞ –¥–ª—è {action_text}:"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_user_list_keyboard(logists, action_type)
        )
        await track_admin_message(update, context, message)

        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    if update.callback_query:
        await update.callback_query.answer()

async def edit_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∞"""
    logist_id = int(update.callback_query.data.split("_")[2])

    db = SessionLocal()
    try:
        logist = db.query(User).filter(User.id == logist_id).first()

        if not logist:
            await update.callback_query.answer("‚ùå –õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        text = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞:\n\n"
        text += f"üë§ –ò–º—è: {logist.name}\n"
        text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist.phone}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"

        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_edit_user_keyboard(logist_id, "logist")
        )
    finally:
        db.close()

    await update.callback_query.answer()

async def delete_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∞"""
    logist_id = int(update.callback_query.data.split("_")[2])

    db = SessionLocal()
    try:
        logist = db.query(User).filter(User.id == logist_id).first()

        if not logist:
            await update.callback_query.answer("‚ùå –õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        db.delete(logist)
        db.commit()
        text = f"‚úÖ –õ–æ–≥–∏—Å—Ç {logist.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"

        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_manage_logists_keyboard()
        )
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞: {str(e)}"
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_manage_logists_keyboard()
        )
    finally:
        db.close()

    await update.callback_query.answer()

async def edit_logist_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –ª–æ–≥–∏—Å—Ç–∞"""
    from keyboards import get_cancel_keyboard
    data_parts = update.callback_query.data.split("_")
    field = data_parts[1]  # name –∏–ª–∏ phone
    logist_id = int(data_parts[3])

    context.user_data["state"] = EDITING_LOGIST
    context.user_data["edit_logist_id"] = logist_id
    context.user_data["edit_field"] = field

    field_text = "–∏–º—è" if field == "name" else "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"

    await update.callback_query.edit_message_text(
        text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_text}:",
        reply_markup=get_cancel_keyboard()
    )

    await update.callback_query.answer()

async def handle_edit_logist_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–∏—Å—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if text in ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_manage_logists_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
        return

    logist_id = context.user_data.get("edit_logist_id")
    field = context.user_data.get("edit_field")

    if not context.user_data.get("edit_logist_id") or not field:
        return

    db = SessionLocal()
    try:
        logist = db.query(User).filter(User.id == logist_id).first()

        if not logist:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=get_manage_logists_keyboard()
            )
            context.user_data.clear()
            context.user_data["last_message_id"] = message.message_id
            return

        old_value = getattr(logist, field)
        setattr(logist, field, text)
        db.commit()

        field_text = "–∏–º—è" if field == "name" else "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        text_msg = f"‚úÖ {field_text.capitalize()} –ª–æ–≥–∏—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        text_msg += f"–ë—ã–ª–æ: {old_value}\n"
        text_msg += f"–°—Ç–∞–ª–æ: {text}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text_msg,
            reply_markup=get_manage_logists_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}",
            reply_markup=get_manage_logists_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú–ò ===

async def manage_cars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏"""
    from keyboards import get_manage_cars_keyboard

    text = "üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_manage_cars_keyboard()
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=get_manage_cars_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data["last_message_id"] = message.message_id

    await update.callback_query.answer()

async def show_cars_list(update: Update, context: ContextTypes.DEFAULT_TYPE, action_type: str = "view"):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""
    await delete_previous_messages(update, context)

    db = SessionLocal()
    try:
        cars = db.query(Car).all()

        if not cars:
            from keyboards import get_admin_cars_keyboard
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_admin_cars_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id
            return

        if action_type == "view":
            text = "üöó –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:\n\n"
            for car in cars:
                car_info = f"üöó {car.number}"
                if car.brand:
                    car_info += f" ({car.brand}"
                    if car.model:
                        car_info += f" {car.model}"
                    car_info += ")"
                text += f"{car_info}\n"
                if car.fuel:
                    text += f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car.fuel}\n"
                if car.current_mileage:
                    text += f"üìè –ü—Ä–æ–±–µ–≥: {car.current_mileage} –∫–º\n"
                text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

            from keyboards import get_admin_cars_keyboard
            message = await context.bot.send_message(
                chatid=update.effective_chat.id,
                text=text,
                reply_markup=get_admin_cars_keyboard()
            )
            await track_admin_message(update, context, message)

        else:
            action_text = "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" if action_type.startswith("edit") else "—É–¥–∞–ª–µ–Ω–∏—è"
            text = f"üöó –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è {action_text}:"

            from keyboards import get_car_list_keyboard
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=get_car_list_keyboard(cars, action_type)
            )
            await track_admin_message(update, context, message)

        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    if update.callback_query:
        await update.callback_query.answer()

async def edit_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"""
    await delete_previous_messages(update, context)

    car_id = int(update.callback_query.data.split("_")[2])

    db = SessionLocal()
    try:
        car = db.query(Car).filter(Car.id == car_id).first()

        if not car:
            await update.callback_query.answer("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        text = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:\n\n"
        text += f"üöó –ù–æ–º–µ—Ä: {car.number}\n"
        text += f"üè≠ –ú–∞—Ä–∫–∞: {car.brand or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        text += f"üöô –ú–æ–¥–µ–ª—å: {car.model or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        text += f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car.fuel or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üìè –ü—Ä–æ–±–µ–≥: {car.current_mileage} –∫–º\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"

        from keyboards import get_edit_car_keyboard
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_edit_car_keyboard(car_id)
        )
    finally:
        db.close()

    await update.callback_query.answer()

async def delete_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å"""
    car_id = int(update.callback_query.data.split("_")[2])

    db = SessionLocal()
    try:
        car = db.query(Car).filter(Car.id == car_id).first()

        if not car:
            await update.callback_query.answer("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã —Å —ç—Ç–∏–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º
        active_shifts = db.query(Shift).filter(
            Shift.car_id == car_id,
            Shift.is_active == True
        ).count()

        if active_shifts > 0:
            text = f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å {car.number}, –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω–∞—Ö!"
        else:
            db.delete(car)
            db.commit()
            text = f"‚úÖ –ê–≤—Ç–æ–º–æ–±–∏–ª—å {car.number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"

        from keyboards import get_admin_cars_keyboard
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_admin_cars_keyboard()
        )
    except Exception as e:
        from keyboards import get_admin_cars_keyboard
        text = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {str(e)}"
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_admin_cars_keyboard()
        )
    finally:
        db.close()

    await update.callback_query.answer()

async def edit_car_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    data_parts = update.callback_query.data.split("_")
    field = data_parts[1]  # number, brand, model, fuel, mileage
    car_id = int(data_parts[3])

    context.user_data["state"] = "EDITING_CAR"
    context.user_data["edit_car_id"] = car_id
    context.user_data["edit_field"] = field

    field_names = {
        "number": "–Ω–æ–º–µ—Ä",
        "brand": "–º–∞—Ä–∫—É",
        "model": "–º–æ–¥–µ–ª—å", 
        "fuel": "—Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞",
        "mileage": "–ø—Ä–æ–±–µ–≥ (–∫–º)"
    }

    field_text = field_names.get(field, "–ø–æ–ª–µ")

    await update.callback_query.edit_message_text(
        text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_text}':",
        reply_markup=get_cancel_keyboard()
    )

    await update.callback_query.answer()

async def handle_edit_car_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—Ç–º–µ–Ω—É
    if text in ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]:
        from keyboards import get_admin_cars_keyboard
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=get_admin_cars_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
        return

    car_id = context.user_data.get("edit_car_id")
    field = context.user_data.get("edit_field")

    if not car_id or not field:
        return

    db = SessionLocal()
    try:
        car = db.query(Car).filter(Car.id == car_id).first()

        if not car:
            from keyboards import get_admin_cars_keyboard
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=get_admin_cars_keyboard()
            )
            await track_admin_message(update, context, message)

            context.user_data.clear()
            context.user_data["last_message_id"] = message.message_id
            return

        old_value = getattr(car, field)

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–±–µ–≥–∞
        if field == "mileage":
            try:
                new_value = int(text)
                setattr(car, "current_mileage", new_value)
            except ValueError:
                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text="‚ùå –ü—Ä–æ–±–µ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!",
                    reply_markup=get_back_keyboard()
                )
                await track_admin_message(update, context, message)

                context.user_data["last_message_id"] = message.message_id
                return
        else:
            setattr(car, field, text)

        db.commit()

        field_names = {
            "number": "–Ω–æ–º–µ—Ä",
            "brand": "–º–∞—Ä–∫–∞",
            "model": "–º–æ–¥–µ–ª—å", 
            "fuel": "—Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞",
            "mileage": "–ø—Ä–æ–±–µ–≥"
        }

        field_text = field_names.get(field, "–ø–æ–ª–µ")
        text_msg = f"‚úÖ {field_text.capitalize()} –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        text_msg += f"–ë—ã–ª–æ: {old_value if field != 'mileage' else getattr(car, 'current_mileage')}\n"
        text_msg += f"–°—Ç–∞–ª–æ: {text if field != 'mileage' else getattr(car, 'current_mileage')}"

        from keyboards import get_admin_cars_keyboard
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text_msg,
            reply_markup=get_admin_cars_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        from keyboards import get_admin_cars_keyboard
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}",
            reply_markup=get_admin_cars_keyboard()
        )
        await track_admin_message(update, context, message)

        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–ú–ï–ù–ê–ú–ò ===

async def show_active_shifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã"""
    await delete_previous_messages(update, context)

    db = SessionLocal()
    try:
        active_shifts = db.query(Shift).filter(Shift.is_active == True).all()

        if not active_shifts:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_admin_inline_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id
            return

        text = "üöõ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã:\n\n"

        from telegram import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = []

        for shift in active_shifts:
            driver = shift.driver
            car = shift.car

            car_info = car.number
            if car.brand:
                car_info += f" ({car.brand}"
                if car.model:
                    car_info += f" {car.model}"
                car_info += ")"

            start_time = shift.start_time.strftime('%H:%M')
            text += f"üë§ {driver.name}\n"
            text += f"üöó {car_info}\n"
            text += f"‚è∞ –ù–∞—á–∞–ª–æ: {start_time}\n"
            text += f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–º–µ–Ω–æ–π
            keyboard.append([
                InlineKeyboardButton(f"‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É {driver.name}", callback_data=f"end_shift_{shift.id}")
            ])
            keyboard.append([
                InlineKeyboardButton(f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–º–µ–Ω—É {driver.name}", callback_data=f"cancel_shift_{shift.id}")
            ])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_panel")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=reply_markup
        )
        await track_admin_message(update, context, message)

        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    if update.callback_query:
        await update.callback_query.answer()

async def end_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–º–µ–Ω—É"""
    shift_id = int(update.callback_query.data.split("_")[2])

    db = SessionLocal()
    try:
        shift = db.query(Shift).filter(Shift.id == shift_id).first()

        if not shift:
            await update.callback_query.answer("‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        if not shift.is_active:
            await update.callback_query.answer("‚ùå –°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return

        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–º–µ–Ω—É
        shift.end_time = datetime.now()
        shift.is_active = False
        db.commit()

        driver = shift.driver
        car = shift.car

        car_info = car.number
        if car.brand:
            car_info += f" ({car.brand}"
            if car.model:
                car_info += f" {car.model}"
            car_info += ")"

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–º–µ–Ω—ã
        try:
            if driver.telegram_id:
                driver_text = f"‚úÖ –í–∞—à–∞ —Å–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                driver_text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}\n"
                driver_text += f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {shift.start_time.strftime('%H:%M')}\n"
                driver_text += f"‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {shift.end_time.strftime('%H:%M')}\n"
                driver_text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(shift.end_time - shift.start_time).total_seconds() / 3600:.1f} —á"

                await context.bot.send_message(
                    chat_id=driver.telegram_id,
                    text=driver_text
                )
        except:
            pass

        text = f"‚úÖ –°–º–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è {driver.name} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}\n"
        text += f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {shift.start_time.strftime('%H:%M')}\n"
        text += f"‚è∞ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {shift.end_time.strftime('%H:%M')}\n"
        text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {(shift.end_time - shift.start_time).total_seconds() / 3600:.1f} —á"

        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω—ã–º —Å–º–µ–Ω–∞–º", callback_data="show_active_shifts"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="admin_panel")
            ]])
        )

    except Exception as e:
        await update.callback_query.edit_message_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–º–µ–Ω—ã: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω—ã–º —Å–º–µ–Ω–∞–º", callback_data="show_active_shifts")
            ]])
        )
    finally:
        db.close()

    await update.callback_query.answer()

async def cancel_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–º–µ–Ω—É"""
    shift_id = int(update.callback_query.data.split("_")[2])

    db = SessionLocal()
    try:
        shift = db.query(Shift).filter(Shift.id == shift_id).first()

        if not shift:
            await update.callback_query.answer("‚ùå –°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        if not shift.is_active:
            await update.callback_query.answer("‚ùå –°–º–µ–Ω–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return

        driver = shift.driver
        car = shift.car

        car_info = car.number
        if car.brand:
            car_info += f" ({car.brand}"
            if car.model:
                car_info += f" {car.model}"
            car_info += ")"

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ —Å–º–µ–Ω—ã
        try:
            if driver.telegram_id:
                driver_text = f"‚ùå –í–∞—à–∞ —Å–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
                driver_text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}\n"
                driver_text += f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {shift.start_time.strftime('%H:%M')}\n"
                driver_text += f"‚è∞ –í—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã: {datetime.now().strftime('%H:%M')}"

                await context.bot.send_message(
                    chat_id=driver.telegram_id,
                    text=driver_text
                )
        except:
            pass

        # –£–¥–∞–ª—è–µ–º —Å–º–µ–Ω—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.delete(shift)
        db.commit()

        text = f"‚ùå –°–º–µ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è {driver.name} –æ—Ç–º–µ–Ω–µ–Ω–∞!\n\n"
        text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}\n"
        text += f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {shift.start_time.strftime('%H:%M')}\n"
        text += f"‚è∞ –í—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã: {datetime.now().strftime('%H:%M')}"

        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω—ã–º —Å–º–µ–Ω–∞–º", callback_data="show_active_shifts"),
                InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–∞—è", callback_data="admin_panel")
            ]])
        )

    except Exception as e:
        await update.callback_query.edit_message_text(
            text=f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã —Å–º–µ–Ω—ã: {str(e)}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω—ã–º —Å–º–µ–Ω–∞–º", callback_data="show_active_shifts")
            ]])
        )
    finally:
        db.close()

    await update.callback_query.answer()

# === –ò–°–¢–û–†–ò–Ø –°–ú–ï–ù –ò –û–¢–ß–ï–¢–´ ===

async def shifts_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω"""
    from keyboards import get_admin_shifts_keyboard

    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω
        completed_shifts = db.query(Shift).filter(
            Shift.is_active == False,
            Shift.end_time != None
        ).order_by(Shift.end_time.desc()).limit(10).all()

        if not completed_shifts:
            text = "üìã –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω –ø—É—Å—Ç–∞"
        else:
            text = "üìã –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n\n"

            for shift in completed_shifts:
                driver = shift.driver
                car = shift.car

                car_info = car.number
                if car.brand:
                    car_info += f" ({car.brand}"
                    if car.model:
                        car_info += f" {car.model}"
                    car_info += ")"

                start_time = shift.start_time.strftime('%d.%m %H:%M')
                end_time = shift.end_time.strftime('%d.%m %H:%M')
                duration = (shift.end_time - shift.start_time).total_seconds() / 3600

                text += f"üë§ {driver.name}\n"
                text += f"üöó {car_info}\n"
                text += f"üìÖ {start_time} - {end_time}\n"
                text += f"‚è±Ô∏è {duration:.1f} —á\n"
                text += f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_admin_shifts_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_admin_shifts_keyboard()
            )
            await track_admin_message(update, context, message)

            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await update.callback_query.answer()

async def shifts_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–∞–º"""
    from keyboards import get_admin_reports_keyboard
    from datetime import datetime, timedelta

    db = SessionLocal()
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.now() - timedelta(days=7)

        week_shifts = db.query(Shift).filter(
            Shift.start_time >= week_ago
        ).count()

        completed_week = db.query(Shift).filter(
            Shift.start_time >= week_ago,
            Shift.is_active == False,
            Shift.end_time != None
        ).all()

        total_hours = 0
        if completed_week:
            for shift in completed_week:
                duration = (shift.end_time - shift.start_time).total_seconds() / 3600
                total_hours += duration

        avg_hours = total_hours / len(completed_week) if completed_week else 0

        text = "üìä –û—Ç—á–µ—Ç –ø–æ —Å–º–µ–Ω–∞–º (7 –¥–Ω–µ–π)\n\n"
        text += f"üöõ –í—Å–µ–≥–æ —Å–º–µ–Ω: {week_shifts}\n"
        text += f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {len(completed_week)}\n"
        text += f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è: {total_hours:.1f} —á\n"
        text += f"üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {avg_hours:.1f} —á"

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_admin_reports_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_admin_reports_keyboard()
            )
            await track_admin_message(update, context, message)

            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await update.callback_query.answer()

async def cars_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—á–µ—Ç –ø–æ –º–∞—à–∏–Ω–∞–º"""
    from keyboards import get_admin_reports_keyboard
    from datetime import datetime, timedelta

    db = SessionLocal()
    try:
        cars = db.query(Car).all()
        week_ago = datetime.now() - timedelta(days=7)

        text = "üìä –û—Ç—á–µ—Ç –ø–æ –º–∞—à–∏–Ω–∞–º (7 –¥–Ω–µ–π)\n\n"

        for car in cars:
            car_info = car.number
            if car.brand:
                car_info += f" ({car.brand}"
                if car.model:
                    car_info += f" {car.model}"
                car_info += ")"

            car_shifts = db.query(Shift).filter(
                Shift.car_id == car.id,
                Shift.start_time >= week_ago
            ).count()

            text += f"üöó {car_info}: {car_shifts} —Å–º–µ–Ω\n"

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_admin_reports_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_admin_reports_keyboard()
            )
            await track_admin_message(update, context, message)

            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await update.callback_query.answer()

async def employees_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç—á–µ—Ç –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"""
    from keyboards import get_admin_reports_keyboard
    from datetime import datetime, timedelta

    db = SessionLocal()
    try:
        drivers = db.query(User).filter(User.role == "driver").all()
        week_ago = datetime.now() - timedelta(days=7)

        text = "üìä –û—Ç—á–µ—Ç –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º (7 –¥–Ω–µ–π)\n\n"

        for driver in drivers:
            driver_shifts = db.query(Shift).filter(
                Shift.driver_id == driver.id,
                Shift.start_time >= week_ago
            ).count()

            completed_shifts = db.query(Shift).filter(
                Shift.driver_id == driver.id,
                Shift.start_time >= week_ago,
                Shift.is_active == False,
                Shift.end_time != None
            ).all()

            total_hours = 0
            if completed_shifts:
                for shift in completed_shifts:
                    duration = (shift.end_time - shift.start_time).total_seconds() / 3600
                    total_hours += duration

            text += f"üë§ {driver.name}\n"
            text += f"   üöõ –°–º–µ–Ω: {driver_shifts}\n"
            text += f"   ‚è±Ô∏è –ß–∞—Å–æ–≤: {total_hours:.1f}\n"

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_admin_reports_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_admin_reports_keyboard()
            )
            await track_admin_message(update, context, message)

            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await update.callback_query.answer()