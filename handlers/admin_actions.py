from telegram import Update
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car, Shift
from keyboards import get_admin_menu, get_back_keyboard, get_confirm_keyboard, get_admin_inline_keyboard, get_user_list_keyboard, get_edit_user_keyboard, get_manage_drivers_keyboard, get_manage_logists_keyboard
import states
from states import ADDING_DRIVER, ADDING_LOGIST, ADDING_CAR, EDITING_DRIVER, EDITING_LOGIST
from config import ADMIN_ID

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        if update.message:
            await update.message.delete()
    except:
        pass

async def handle_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"""
    text = update.message.text
    current_state = context.user_data.get("state")

    if current_state == ADDING_DRIVER:
        await handle_driver_input(update, context, text)
    elif current_state == ADDING_LOGIST:
        await handle_logist_input(update, context, text)
    elif current_state == ADDING_CAR:
        await handle_car_input(update, context, text)
    elif current_state == EDITING_DRIVER:
        await handle_edit_driver_input(update, context, text)
    elif current_state == EDITING_LOGIST:
        await handle_edit_logist_input(update, context, text)

async def handle_add_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    await delete_previous_messages(update, context)

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=get_back_keyboard()
    )
    context.user_data["state"] = ADDING_DRIVER
    context.user_data["driver_data"] = {}
    context.user_data["last_message_id"] = message.message_id

    if update.callback_query:
        await update.callback_query.answer()

async def handle_driver_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_data = context.user_data.get("driver_data", {})

    if "name" not in driver_data:
        driver_data["name"] = text
        context.user_data["driver_data"] = driver_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "phone" not in driver_data:
        driver_data["phone"] = text
        context.user_data["driver_data"] = driver_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è:\n\n"
        confirm_text += f"üë§ –ò–º—è: {driver_data['name']}\n"
        confirm_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

async def handle_add_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    await delete_previous_messages(update, context)

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ª–æ–≥–∏—Å—Ç–∞:",
        reply_markup=get_back_keyboard()
    )
    context.user_data["state"] = ADDING_LOGIST
    context.user_data["logist_data"] = {}
    context.user_data["last_message_id"] = message.message_id

    if update.callback_query:
        await update.callback_query.answer()

async def handle_logist_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–∏—Å—Ç–∞"""
    logist_data = context.user_data.get("logist_data", {})

    if "name" not in logist_data:
        logist_data["name"] = text
        context.user_data["logist_data"] = logist_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ª–æ–≥–∏—Å—Ç–∞:",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "phone" not in logist_data:
        logist_data["phone"] = text
        context.user_data["logist_data"] = logist_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏—Å—Ç–∞:\n\n"
        confirm_text += f"üë§ –ò–º—è: {logist_data['name']}\n"
        confirm_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

async def handle_add_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"""
    await delete_previous_messages(update, context)

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:",
        reply_markup=get_back_keyboard()
    )
    context.user_data["state"] = ADDING_CAR
    context.user_data["car_data"] = {}
    context.user_data["last_message_id"] = message.message_id

    if update.callback_query:
        await update.callback_query.answer()

async def handle_car_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω—ã"""
    car_data = context.user_data.get("car_data", {})

    if "number" not in car_data:
        car_data["number"] = text
        context.user_data["car_data"] = car_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üè≠ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "brand" not in car_data:
        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            car_data["brand"] = text
        else:
            car_data["brand"] = ""
        context.user_data["car_data"] = car_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üöô –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "model" not in car_data:
        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            car_data["model"] = text
        else:
            car_data["model"] = ""
        context.user_data["car_data"] = car_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã:\n\n"
        confirm_text += f"üöó –ù–æ–º–µ—Ä: {car_data['number']}\n"
        confirm_text += f"üè≠ –ú–∞—Ä–∫–∞: {car_data.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        confirm_text += f"üöô –ú–æ–¥–µ–ª—å: {car_data.get('model', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

async def create_admin_entries(phone: str, name: str = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—è –∏ –ª–æ–≥–∏—Å—Ç–∞"""
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏
        existing_driver = db.query(User).filter(
            User.phone == phone, 
            User.role == "driver"
        ).first()
        
        existing_logist = db.query(User).filter(
            User.phone == phone, 
            User.role == "logist"
        ).first()

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not existing_driver:
            driver = User(
                telegram_id=None,  # –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_id —Å—Ä–∞–∑—É
                name=name,
                phone=phone,
                role="driver"
            )
            db.add(driver)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ª–æ–≥–∏—Å—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not existing_logist:
            logist = User(
                telegram_id=None,  # –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_id —Å—Ä–∞–∑—É
                name=name,
                phone=phone,
                role="logist"
            )
            db.add(logist)

        db.commit()
        return True
    except Exception as e:
        db.rollback()
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False
    finally:
        db.close()

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    current_state = context.user_data.get("state")

    if current_state == ADDING_DRIVER:
        await confirm_add_driver(update, context)
    elif current_state == ADDING_LOGIST:
        await confirm_add_logist(update, context)
    elif current_state == ADDING_CAR:
        await confirm_add_car(update, context)

    if update.callback_query:
        await update.callback_query.answer()

async def confirm_add_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_data = context.user_data.get("driver_data", {})

    if not driver_data:
        return

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        existing_user = db.query(User).filter(User.phone == driver_data["phone"]).first()
        
        if existing_user:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {driver_data['phone']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
            text += f"üë§ –ò–º—è: {existing_user.name}\n"
            text += f"üìã –†–æ–ª—å: {existing_user.role}"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
            new_driver = User(
                name=driver_data["name"],
                phone=driver_data["phone"],
                role="driver"
            )

            db.add(new_driver)
            db.commit()

            text = f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            text += f"üë§ –ò–º—è: {driver_data['name']}\n"
            text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def confirm_add_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    logist_data = context.user_data.get("logist_data", {})

    if not logist_data:
        return

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        existing_user = db.query(User).filter(User.phone == logist_data["phone"]).first()
        
        if existing_user:
            text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {logist_data['phone']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
            text += f"üë§ –ò–º—è: {existing_user.name}\n"
            text += f"üìã –†–æ–ª—å: {existing_user.role}"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏—Å—Ç–∞
            new_logist = User(
                name=logist_data["name"],
                phone=logist_data["phone"],
                role="logist"
            )

            db.add(new_logist)
            db.commit()

            text = f"‚úÖ –õ–æ–≥–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            text += f"üë§ –ò–º—è: {logist_data['name']}\n"
            text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞: {str(e)}"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def confirm_add_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"""
    car_data = context.user_data.get("car_data", {})

    if not car_data:
        return

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –º–∞—à–∏–Ω–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
        existing_car = db.query(Car).filter(Car.number == car_data["number"]).first()
        
        if existing_car:
            text = f"‚ùå –ú–∞—à–∏–Ω–∞ —Å –Ω–æ–º–µ—Ä–æ–º {car_data['number']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n\n"
            text += f"üè≠ –ú–∞—Ä–∫–∞: {existing_car.brand or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            text += f"üöô –ú–æ–¥–µ–ª—å: {existing_car.model or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}"
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É
            new_car = Car(
                number=car_data["number"],
                brand=car_data.get("brand", ""),
                model=car_data.get("model", "")
            )

            db.add(new_car)
            db.commit()

            text = f"‚úÖ –ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
            text += f"üöó –ù–æ–º–µ—Ä: {car_data['number']}\n"
            text += f"üè≠ –ú–∞—Ä–∫–∞: {car_data.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
            text += f"üöô –ú–æ–¥–µ–ª—å: {car_data.get('model', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: {str(e)}"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –í–û–î–ò–¢–ï–õ–Ø–ú–ò ===

async def show_drivers_list(update: Update, context: ContextTypes.DEFAULT_TYPE, action_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    await delete_previous_messages(update, context)

    db = SessionLocal()
    try:
        drivers = db.query(User).filter(User.role == "driver").all()
        
        if not drivers:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_manage_drivers_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id
            return

        action_text = "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" if action_type.startswith("edit") else "—É–¥–∞–ª–µ–Ω–∏—è"
        text = f"üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è {action_text}:"
        
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_user_list_keyboard(drivers, action_type)
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    if update.callback_query:
        await update.callback_query.answer()

async def edit_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_id = int(update.callback_query.data.split("_")[2])
    
    db = SessionLocal()
    try:
        driver = db.query(User).filter(User.id == driver_id).first()
        
        if not driver:
            await update.callback_query.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        text = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è:\n\n"
        text += f"üë§ –ò–º—è: {driver.name}\n"
        text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"

        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_edit_user_keyboard(driver_id, "driver")
        )
    finally:
        db.close()

    await update.callback_query.answer()

async def delete_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_id = int(update.callback_query.data.split("_")[2])
    
    db = SessionLocal()
    try:
        driver = db.query(User).filter(User.id == driver_id).first()
        
        if not driver:
            await update.callback_query.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã
        active_shifts = db.query(Shift).filter(
            Shift.driver_id == driver_id,
            Shift.is_active == True
        ).count()

        if active_shifts > 0:
            text = f"‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è {driver.name}, —É –Ω–µ–≥–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã!"
        else:
            db.delete(driver)
            db.commit()
            text = f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"

        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_manage_drivers_keyboard()
        )
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}"
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_manage_drivers_keyboard()
        )
    finally:
        db.close()

    await update.callback_query.answer()

async def edit_driver_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    data_parts = update.callback_query.data.split("_")
    field = data_parts[1]  # name –∏–ª–∏ phone
    driver_id = int(data_parts[3])
    
    context.user_data["state"] = EDITING_DRIVER
    context.user_data["edit_driver_id"] = driver_id
    context.user_data["edit_field"] = field
    
    field_text = "–∏–º—è" if field == "name" else "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    
    await update.callback_query.edit_message_text(
        text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_text}:",
        reply_markup=get_back_keyboard()
    )
    
    await update.callback_query.answer()

async def handle_edit_driver_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_id = context.user_data.get("edit_driver_id")
    field = context.user_data.get("edit_field")
    
    if not driver_id or not field:
        return
    
    db = SessionLocal()
    try:
        driver = db.query(User).filter(User.id == driver_id).first()
        
        if not driver:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=get_manage_drivers_keyboard()
            )
            context.user_data.clear()
            context.user_data["last_message_id"] = message.message_id
            return

        old_value = getattr(driver, field)
        setattr(driver, field, text)
        db.commit()
        
        field_text = "–∏–º—è" if field == "name" else "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        text_msg = f"‚úÖ {field_text.capitalize()} –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        text_msg += f"–ë—ã–ª–æ: {old_value}\n"
        text_msg += f"–°—Ç–∞–ª–æ: {text}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text_msg,
            reply_markup=get_manage_drivers_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}",
            reply_markup=get_manage_drivers_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–°–¢–ê–ú–ò ===

async def show_logists_list(update: Update, context: ContextTypes.DEFAULT_TYPE, action_type: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏—Å—Ç–æ–≤"""
    await delete_previous_messages(update, context)

    db = SessionLocal()
    try:
        logists = db.query(User).filter(User.role == "logist").all()
        
        if not logists:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –õ–æ–≥–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_manage_logists_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id
            return

        action_text = "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" if action_type.startswith("edit") else "—É–¥–∞–ª–µ–Ω–∏—è"
        text = f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–≥–∏—Å—Ç–∞ –¥–ª—è {action_text}:"
        
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_user_list_keyboard(logists, action_type)
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    if update.callback_query:
        await update.callback_query.answer()

async def edit_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏—Å—Ç–∞"""
    logist_id = int(update.callback_query.data.split("_")[2])
    
    db = SessionLocal()
    try:
        logist = db.query(User).filter(User.id == logist_id).first()
        
        if not logist:
            await update.callback_query.answer("‚ùå –õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        text = f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞:\n\n"
        text += f"üë§ –ò–º—è: {logist.name}\n"
        text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist.phone}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"

        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_edit_user_keyboard(logist_id, "logist")
        )
    finally:
        db.close()

    await update.callback_query.answer()

async def delete_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏—Å—Ç–∞"""
    logist_id = int(update.callback_query.data.split("_")[2])
    
    db = SessionLocal()
    try:
        logist = db.query(User).filter(User.id == logist_id).first()
        
        if not logist:
            await update.callback_query.answer("‚ùå –õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return

        db.delete(logist)
        db.commit()
        text = f"‚úÖ –õ–æ–≥–∏—Å—Ç {logist.name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!"

        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_manage_logists_keyboard()
        )
    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞: {str(e)}"
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_manage_logists_keyboard()
        )
    finally:
        db.close()

    await update.callback_query.answer()

async def edit_logist_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è –ª–æ–≥–∏—Å—Ç–∞"""
    data_parts = update.callback_query.data.split("_")
    field = data_parts[1]  # name –∏–ª–∏ phone
    logist_id = int(data_parts[3])
    
    context.user_data["state"] = EDITING_LOGIST
    context.user_data["edit_logist_id"] = logist_id
    context.user_data["edit_field"] = field
    
    field_text = "–∏–º—è" if field == "name" else "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
    
    await update.callback_query.edit_message_text(
        text=f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {field_text}:",
        reply_markup=get_back_keyboard()
    )
    
    await update.callback_query.answer()

async def handle_edit_logist_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–∏—Å—Ç–∞"""
    logist_id = context.user_data.get("edit_logist_id")
    field = context.user_data.get("edit_field")
    
    if not logist_id or not field:
        return
    
    db = SessionLocal()
    try:
        logist = db.query(User).filter(User.id == logist_id).first()
        
        if not logist:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –õ–æ–≥–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                reply_markup=get_manage_logists_keyboard()
            )
            context.user_data.clear()
            context.user_data["last_message_id"] = message.message_id
            return

        old_value = getattr(logist, field)
        setattr(logist, field, text)
        db.commit()
        
        field_text = "–∏–º—è" if field == "name" else "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        text_msg = f"‚úÖ {field_text.capitalize()} –ª–æ–≥–∏—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
        text_msg += f"–ë—ã–ª–æ: {old_value}\n"
        text_msg += f"–°—Ç–∞–ª–æ: {text}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text_msg,
            reply_markup=get_manage_logists_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}",
            reply_markup=get_manage_logists_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()
