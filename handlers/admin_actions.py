from telegram import Update
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car
from keyboards import get_back_keyboard, get_confirm_keyboard, get_admin_menu

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        if update.message:
            await update.message.delete()
    except:
        pass

async def handle_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞–¥–º–∏–Ω–∫–µ"""
    admin_action = context.user_data.get("admin_action")
    text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–∂–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        from main import handle_back_button
        await handle_back_button(update, context)
        return

    await delete_previous_messages(update, context)

    if admin_action == "adding_driver":
        await handle_driver_input(update, context, text)
    elif admin_action == "adding_logist":
        await handle_logist_input(update, context, text)
    elif admin_action == "adding_car":
        await handle_car_input(update, context, text)

async def handle_add_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    await update.callback_query.answer()

    context.user_data["admin_action"] = "adding_driver"
    context.user_data["driver_data"] = {}

    message = await update.callback_query.message.reply_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=get_back_keyboard()
    )
    context.user_data["last_message_id"] = message.message_id

async def handle_add_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    await update.callback_query.answer()

    context.user_data["admin_action"] = "adding_logist"
    context.user_data["logist_data"] = {}

    message = await update.callback_query.message.reply_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ª–æ–≥–∏—Å—Ç–∞:",
        reply_markup=get_back_keyboard()
    )
    context.user_data["last_message_id"] = message.message_id

async def handle_add_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"""
    await update.callback_query.answer()

    context.user_data["admin_action"] = "adding_car"
    context.user_data["car_data"] = {}

    message = await update.callback_query.message.reply_text(
        "üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:",
        reply_markup=get_back_keyboard()
    )
    context.user_data["last_message_id"] = message.message_id

async def handle_driver_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_data = context.user_data.get("driver_data", {})

    if "name" not in driver_data:
        driver_data["name"] = text
        context.user_data["driver_data"] = driver_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "phone" not in driver_data:
        driver_data["phone"] = text
        context.user_data["driver_data"] = driver_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è:\n\n"
        confirm_text += f"üë§ –ò–º—è: {driver_data['name']}\n"
        confirm_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

async def handle_logist_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–∏—Å—Ç–∞"""
    logist_data = context.user_data.get("logist_data", {})

    if "name" not in logist_data:
        logist_data["name"] = text
        context.user_data["logist_data"] = logist_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ª–æ–≥–∏—Å—Ç–∞:",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "phone" not in logist_data:
        logist_data["phone"] = text
        context.user_data["logist_data"] = logist_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏—Å—Ç–∞:\n\n"
        confirm_text += f"üë§ –ò–º—è: {logist_data['name']}\n"
        confirm_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

async def handle_car_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω—ã"""
    car_data = context.user_data.get("car_data", {})

    if "number" not in car_data:
        car_data["number"] = text
        context.user_data["car_data"] = car_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "brand" not in car_data:
        car_data["brand"] = text if text != "-" else ""
        context.user_data["car_data"] = car_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üöó –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "model" not in car_data:
        car_data["model"] = text if text != "-" else ""
        context.user_data["car_data"] = car_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚õΩ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "fuel" not in car_data:
        car_data["fuel"] = text if text != "-" else ""
        context.user_data["car_data"] = car_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã:\n\n"
        confirm_text += f"üöó –ù–æ–º–µ—Ä: {car_data['number']}\n"
        if car_data.get('brand'):
            confirm_text += f"üè∑Ô∏è –ú–∞—Ä–∫–∞: {car_data['brand']}\n"
        if car_data.get('model'):
            confirm_text += f"üöó –ú–æ–¥–µ–ª—å: {car_data['model']}\n"
        if car_data.get('fuel'):
            confirm_text += f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car_data['fuel']}\n"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

async def confirm_add_driver(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_data = context.user_data.get("driver_data", {})

    if not driver_data.get("name") or not driver_data.get("phone"):
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã"
        )
        context.user_data["last_message_id"] = message.message_id
        return

    db = SessionLocal()
    try:
        new_driver = User(
            telegram_id=0,
            name=driver_data["name"],
            phone=driver_data["phone"],
            role="driver"
        )
        db.add(new_driver)
        db.commit()

        await delete_previous_messages(update, context)

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver_data['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_admin_menu()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}"
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def confirm_add_logist(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    logist_data = context.user_data.get("logist_data", {})

    if not logist_data.get("name") or not logist_data.get("phone"):
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã"
        )
        context.user_data["last_message_id"] = message.message_id
        return

    db = SessionLocal()
    try:
        new_logist = User(
            telegram_id=0,
            name=logist_data["name"],
            phone=logist_data["phone"],
            role="logist"
        )
        db.add(new_logist)
        db.commit()

        await delete_previous_messages(update, context)

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ –õ–æ–≥–∏—Å—Ç {logist_data['name']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_admin_menu()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}"
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def confirm_add_car(update, context):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"""
    car_data = context.user_data.get("car_data", {})

    if not car_data.get("number"):
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –ù–æ–º–µ—Ä –º–∞—à–∏–Ω—ã –Ω–µ –≤–≤–µ–¥–µ–Ω"
        )
        context.user_data["last_message_id"] = message.message_id
        return

    db = SessionLocal()
    try:
        new_car = Car(
            number=car_data["number"],
            brand=car_data.get("brand", ""),
            model=car_data.get("model", ""),
            fuel=car_data.get("fuel", "")
        )
        db.add(new_car)
        db.commit()

        await delete_previous_messages(update, context)

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚úÖ –ú–∞—à–∏–Ω–∞ {car_data['number']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
            reply_markup=get_admin_menu()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        await delete_previous_messages(update, context)
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}"
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def handle_confirm(update, context):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    admin_action = context.user_data.get("admin_action")

    if admin_action == "adding_driver":
        await confirm_add_driver(update, context)
    elif admin_action == "adding_logist":
        await confirm_add_logist(update, context)
    elif admin_action == "adding_car":
        await confirm_add_car(update, context)