from telegram import Update
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car
from keyboards import get_admin_menu, get_back_keyboard, get_confirm_keyboard
from states import ADDING_DRIVER, ADDING_LOGIST, ADDING_CAR

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        if update.message:
            await update.message.delete()
    except:
        pass

async def handle_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö"""
    text = update.message.text
    current_state = context.user_data.get("state")

    if current_state == ADDING_DRIVER:
        await handle_driver_input(update, context, text)
    elif current_state == ADDING_LOGIST:
        await handle_logist_input(update, context, text)
    elif current_state == ADDING_CAR:
        await handle_car_input(update, context, text)

async def handle_driver_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è"""
    step = context.user_data.get("driver_step")
    
    if step == "name":
        context.user_data["driver_data"] = {"name": text}
        context.user_data["driver_step"] = "phone"
        await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è:")
    elif step == "phone":
        driver_data = context.user_data.get("driver_data", {})
        driver_data["phone"] = text
        context.user_data["driver_data"] = driver_data
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è:\n\n"
        confirm_text += f"üë§ –ò–º—è: {driver_data['name']}\n"
        confirm_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver_data['phone']}"
        
        await update.message.reply_text(confirm_text, reply_markup=get_confirm_keyboard())

async def handle_logist_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–∏—Å—Ç–∞"""
    step = context.user_data.get("logist_step")
    
    if step == "name":
        context.user_data["logist_data"] = {"name": text}
        context.user_data["logist_step"] = "phone"
        await update.message.reply_text("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ª–æ–≥–∏—Å—Ç–∞:")
    elif step == "phone":
        logist_data = context.user_data.get("logist_data", {})
        logist_data["phone"] = text
        context.user_data["logist_data"] = logist_data
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞:\n\n"
        confirm_text += f"üë§ –ò–º—è: {logist_data['name']}\n"
        confirm_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist_data['phone']}"
        
        await update.message.reply_text(confirm_text, reply_markup=get_confirm_keyboard())

async def handle_car_input(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω—ã"""
    step = context.user_data.get("car_step")
    
    if step == "number":
        context.user_data["car_data"] = {"number": text}
        context.user_data["car_step"] = "brand"
        await update.message.reply_text("üöó –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã:")
    elif step == "brand":
        car_data = context.user_data.get("car_data", {})
        car_data["brand"] = text
        context.user_data["car_data"] = car_data
        context.user_data["car_step"] = "model"
        await update.message.reply_text("üöô –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã:")
    elif step == "model":
        car_data = context.user_data.get("car_data", {})
        car_data["model"] = text
        context.user_data["car_data"] = car_data
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã:\n\n"
        confirm_text += f"üî¢ –ù–æ–º–µ—Ä: {car_data['number']}\n"
        confirm_text += f"üöó –ú–∞—Ä–∫–∞: {car_data['brand']}\n"
        confirm_text += f"üöô –ú–æ–¥–µ–ª—å: {car_data['model']}"
        
        await update.message.reply_text(confirm_text, reply_markup=get_confirm_keyboard())

async def handle_add_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    await update.callback_query.answer()
    
    text = "üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è:"
    
    try:
        await update.callback_query.edit_message_text(text)
    except:
        message = await update.callback_query.message.reply_text(text)
        context.user_data["last_message_id"] = message.message_id
    
    context.user_data["state"] = ADDING_DRIVER
    context.user_data["driver_step"] = "name"

async def handle_add_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    await update.callback_query.answer()
    
    text = "üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏—Å—Ç–∞\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ª–æ–≥–∏—Å—Ç–∞:"
    
    try:
        await update.callback_query.edit_message_text(text)
    except:
        message = await update.callback_query.message.reply_text(text)
        context.user_data["last_message_id"] = message.message_id
    
    context.user_data["state"] = ADDING_LOGIST
    context.user_data["logist_step"] = "name" –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    await delete_previous_messages(update, context)

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è:",
        reply_markup=get_back_keyboard()
    )
    context.user_data["state"] = ADDING_DRIVER
    context.user_data["driver_data"] = {}
    context.user_data["last_message_id"] = message.message_id

    if update.callback_query:
        await update.callback_query.answer()

async def handle_driver_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_data = context.user_data.get("driver_data", {})

    if "name" not in driver_data:
        driver_data["name"] = text
        context.user_data["driver_data"] = driver_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è:",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "phone" not in driver_data:
        driver_data["phone"] = text
        context.user_data["driver_data"] = driver_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è:\n\n"
        confirm_text += f"üë§ –ò–º—è: {driver_data['name']}\n"
        confirm_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

async def handle_add_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    await delete_previous_messages(update, context)

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ª–æ–≥–∏—Å—Ç–∞:",
        reply_markup=get_back_keyboard()
    )
    context.user_data["state"] = ADDING_LOGIST
    context.user_data["logist_data"] = {}
    context.user_data["last_message_id"] = message.message_id

    if update.callback_query:
        await update.callback_query.answer()

async def handle_logist_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ª–æ–≥–∏—Å—Ç–∞"""
    logist_data = context.user_data.get("logist_data", {})

    if "name" not in logist_data:
        logist_data["name"] = text
        context.user_data["logist_data"] = logist_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ª–æ–≥–∏—Å—Ç–∞:",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "phone" not in logist_data:
        logist_data["phone"] = text
        context.user_data["logist_data"] = logist_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ª–æ–≥–∏—Å—Ç–∞:\n\n"
        confirm_text += f"üë§ –ò–º—è: {logist_data['name']}\n"
        confirm_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

async def handle_add_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"""
    await update.callback_query.answer()
    
    text = "üöó –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–∞—à–∏–Ω—ã\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:"
    
    try:
        await update.callback_query.edit_message_text(text)
    except:
        message = await update.callback_query.message.reply_text(text)
        context.user_data["last_message_id"] = message.message_id
    
    context.user_data["state"] = ADDING_CAR
    context.user_data["car_step"] = "number" –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"""
    await delete_previous_messages(update, context)

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:",
        reply_markup=get_back_keyboard()
    )
    context.user_data["state"] = ADDING_CAR
    context.user_data["car_data"] = {}
    context.user_data["last_message_id"] = message.message_id

    if update.callback_query:
        await update.callback_query.answer()

async def handle_car_input(update, context, text):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—à–∏–Ω—ã"""
    car_data = context.user_data.get("car_data", {})

    if "number" not in car_data:
        car_data["number"] = text
        context.user_data["car_data"] = car_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üè≠ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "brand" not in car_data:
        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            car_data["brand"] = text
        else:
            car_data["brand"] = ""
        context.user_data["car_data"] = car_data

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üöô –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=get_back_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    elif "model" not in car_data:
        if text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            car_data["model"] = text
        else:
            car_data["model"] = ""
        context.user_data["car_data"] = car_data

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—à–∏–Ω—ã:\n\n"
        confirm_text += f"üöó –ù–æ–º–µ—Ä: {car_data['number']}\n"
        confirm_text += f"üè≠ –ú–∞—Ä–∫–∞: {car_data.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        confirm_text += f"üöô –ú–æ–¥–µ–ª—å: {car_data.get('model', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=confirm_text,
            reply_markup=get_confirm_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
    current_state = context.user_data.get("state")

    if current_state == ADDING_DRIVER:
        await confirm_add_driver(update, context)
    elif current_state == ADDING_LOGIST:
        await confirm_add_logist(update, context)
    elif current_state == ADDING_CAR:
        await confirm_add_car(update, context)

    if update.callback_query:
        await update.callback_query.answer()

async def confirm_add_driver(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    driver_data = context.user_data.get("driver_data", {})

    if not driver_data:
        return

    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        new_driver = User(
            name=driver_data["name"],
            phone=driver_data["phone"],
            role="driver"
        )

        db.add(new_driver)
        db.commit()

        text = f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        text += f"üë§ –ò–º—è: {driver_data['name']}\n"
        text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è: {str(e)}"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close().effective_chat.id,
            text=text,
            reply_markup=get_admin_menu()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def confirm_add_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    logist_data = context.user_data.get("logist_data", {})

    if not logist_data:
        return

    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏—Å—Ç–∞
        new_logist = User(
            name=logist_data["name"],
            phone=logist_data["phone"],
            role="logist"
        )

        db.add(new_logist)
        db.commit()

        text = f"‚úÖ –õ–æ–≥–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        text += f"üë§ –ò–º—è: {logist_data['name']}\n"
        text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_menu()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞: {str(e)}"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_menu()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    await update.callback_query.answer()
    
    current_state = context.user_data.get("state")
    
    if current_state == ADDING_DRIVER:
        await confirm_add_driver(update, context)
    elif current_state == ADDING_LOGIST:
        await confirm_add_logist(update, context)
    elif current_state == ADDING_CAR:
        await confirm_add_car(update, context)

async def confirm_add_logist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞"""
    logist_data = context.user_data.get("logist_data", {})

    if not logist_data:
        return

    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏—Å—Ç–∞
        new_logist = User(
            name=logist_data["name"],
            phone=logist_data["phone"],
            role="logist"
        )

        db.add(new_logist)
        db.commit()

        text = f"‚úÖ –õ–æ–≥–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
        text += f"üë§ –ò–º—è: {logist_data['name']}\n"
        text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {logist_data['phone']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∞: {str(e)}"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def confirm_add_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã"""
    car_data = context.user_data.get("car_data", {})

    if not car_data:
        return

    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–∞—à–∏–Ω—É
        new_car = Car(
            number=car_data["number"],
            brand=car_data["brand"],
            model=car_data["model"]
        )

        db.add(new_car)
        db.commit()

        text = f"‚úÖ –ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        text += f"üî¢ –ù–æ–º–µ—Ä: {car_data['number']}\n"
        text += f"üöó –ú–∞—Ä–∫–∞: {car_data['brand']}\n"
        text += f"üöô –ú–æ–¥–µ–ª—å: {car_data['model']}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: {str(e)}"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()=car_data.get("brand", ""),
            model=car_data.get("model", "")
        )

        db.add(new_car)
        db.commit()

        text = f"‚úÖ –ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
        text += f"üöó –ù–æ–º–µ—Ä: {car_data['number']}\n"
        text += f"üè≠ –ú–∞—Ä–∫–∞: {car_data.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"üöô –ú–æ–¥–µ–ª—å: {car_data.get('model', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"

        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_menu()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—à–∏–Ω—ã: {str(e)}"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_admin_menu()
        )
        context.user_data.clear()
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()