from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car

async def handle_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    admin_action = context.user_data.get("admin_action")

    if admin_action == "adding_driver":
        await handle_driver_adding(update, context)
    elif admin_action == "adding_car":
        await handle_car_adding(update, context)

async def handle_driver_adding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    driver_data = context.user_data.get("driver_data", {})
    text = update.message.text

    if "name" not in driver_data:
        driver_data["name"] = text
        context.user_data["driver_data"] = driver_data
        await update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è:")
    elif "phone" not in driver_data:
        driver_data["phone"] = text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –≤ –±–∞–∑—É
        db = SessionLocal()
        new_driver = User(
            phone=driver_data["phone"],
            name=driver_data["name"],
            role="driver"
        )
        db.add(new_driver)
        db.commit()
        db.close()

        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="manage_drivers")]]
        await update.message.reply_text(
            f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

async def handle_car_adding(update: Update, context: ContextTypes.DEFAULT_TYPE):
    car_data = context.user_data.get("car_data", {})
    text = update.message.text

    if "number" not in car_data:
        car_data["number"] = text
        context.user_data["car_data"] = car_data
        await update.message.reply_text("üè≠ –í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –º–∞—à–∏–Ω—ã:")
    elif "brand" not in car_data:
        car_data["brand"] = text
        context.user_data["car_data"] = car_data
        await update.message.reply_text("üöó –í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω—ã:")
    elif "model" not in car_data:
        car_data["model"] = text
        context.user_data["car_data"] = car_data
        await update.message.reply_text("‚õΩ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç–æ–ø–ª–∏–≤–∞:")
    elif "fuel" not in car_data:
        car_data["fuel"] = text
        context.user_data["car_data"] = car_data
        await update.message.reply_text("üìè –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–±–µ–≥ (–∫–º):")
    elif "mileage" not in car_data:
        try:
            mileage = int(text)
            car_data["mileage"] = mileage

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—à–∏–Ω—É –≤ –±–∞–∑—É
            db = SessionLocal()
            new_car = Car(
                number=car_data["number"],
                brand=car_data["brand"],
                model=car_data["model"],
                fuel=car_data["fuel"],
                current_mileage=car_data["mileage"]
            )
            db.add(new_car)
            db.commit()
            db.close()

            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="manage_cars")]]
            await update.message.reply_text(
                f"‚úÖ –ú–∞—à–∏–Ω–∞ {car_data['brand']} {car_data['model']} ({car_data['number']}) –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )

            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
        except ValueError:
            await update.message.reply_text("‚ùå –ü—Ä–æ–±–µ–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:")