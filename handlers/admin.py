from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car, Shift
from config import ADMIN_ID
from keyboards import get_admin_inline_keyboard

async def admin_panel(update, context):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–¥–º–∏–Ω
    if update.effective_user.id != ADMIN_ID:
        if update.callback_query:
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    if update.callback_query:
        query = update.callback_query
        await query.answer()

        if query.data == "manage_drivers":
            await show_drivers_management(update, context)
        elif query.data == "manage_cars":
            await show_cars_management(update, context)
        elif query.data == "admin_stats":
            await show_admin_stats(update, context)
        elif query.data == "add_driver":
            await add_driver_start(update, context)
        elif query.data == "add_car":
            await add_car_start(update, context)
        elif query.data == "back_to_admin":
            text = "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            keyboard = get_admin_inline_keyboard()

            if update.callback_query:
                await update.callback_query.answer()
                try:
                    await update.callback_query.edit_message_text(text, reply_markup=keyboard)
                except Exception as e:
                    if "Message is not modified" in str(e):
                        # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        pass
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        await update.callback_query.message.reply_text(text, reply_markup=keyboard)
            else:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    if context.user_data.get("last_message_id"):
                        await context.bot.delete_message(
                            chat_id=update.effective_chat.id,
                            message_id=context.user_data["last_message_id"]
                        )
                    await update.message.delete()
                except:
                    pass

                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=text,
                    reply_markup=keyboard
                )
                context.user_data["last_message_id"] = message.message_id
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏ –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            text = "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            keyboard = get_admin_inline_keyboard()

            if update.callback_query:
                await update.callback_query.answer()
                try:
                    await update.callback_query.edit_message_text(text, reply_markup=keyboard)
                except Exception as e:
                    if "Message is not modified" in str(e):
                        # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        pass
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        await update.callback_query.message.reply_text(text, reply_markup=keyboard)
            else:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                try:
                    if context.user_data.get("last_message_id"):
                        await context.bot.delete_message(
                            chat_id=update.effective_chat.id,
                            message_id=context.user_data["last_message_id"]
                        )
                    await update.message.delete()
                except:
                    pass

                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=text,
                    reply_markup=keyboard
                )
                context.user_data["last_message_id"] = message.message_id
    else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            text = "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
            keyboard = get_admin_inline_keyboard()

            if update.callback_query:
                await update.callback_query.answer()
                try:
                    await update.callback_query.edit_message_text(text, reply_markup=keyboard)
                except Exception as e:
                    if "Message is not modified" in str(e):
                        # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        pass
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                        await update.callback_query.message.reply_text(text, reply_markup=keyboard)
            else:
                # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await delete_previous_messages(update, context)

                message = await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=text,
                    reply_markup=keyboard
                )
                context.user_data["last_message_id"] = message.message_id

async def manage_drivers(update, context):
    await show_drivers_management(update, context)

async def manage_cars(update, context):
    await show_cars_management(update, context)

async def show_drivers_management(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏"""
    db = SessionLocal()
    drivers = db.query(User).filter(User.role == "driver").all()
    db.close()

    text = "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏:\n\n"
    if drivers:
        for driver in drivers:
            status = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω" if driver.telegram_id else "‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            text += f"‚Ä¢ {driver.name} ({driver.phone}) - {status}\n"
    else:
        text += "–í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è", callback_data="add_driver")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=reply_markup
        )
    except Exception as e:
        if "Message is not modified" in str(e):
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await update.callback_query.answer()
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.callback_query.message.reply_text(
                text=text,
                reply_markup=reply_markup
            )

async def show_cars_management(update, context):
    db = SessionLocal()
    cars = db.query(Car).all()
    db.close()

    text = "üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏:\n\n"
    if cars:
        for car in cars:
            text += f"üöó {car.number}\nüè≠ {car.brand} {car.model}\n‚õΩ {car.fuel}\nüìè {car.current_mileage} –∫–º\n\n"
    else:
        text += "–ú–∞—à–∏–Ω –ø–æ–∫–∞ –Ω–µ—Ç."

    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–∞—à–∏–Ω—É", callback_data="add_car")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]
    ]

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def show_admin_stats(update, context):
    db = SessionLocal()
    drivers_count = db.query(User).filter(User.role == "driver").count()
    cars_count = db.query(Car).count()
    active_shifts = db.query(Shift).filter(Shift.status == "active").count()
    db.close()

    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\nüë• –í–æ–¥–∏—Ç–µ–ª–µ–π: {drivers_count}\nüöó –ú–∞—à–∏–Ω: {cars_count}\nüöõ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω: {active_shifts}"

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_admin")]]

    if update.callback_query:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def add_driver_start(update, context):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("üë§ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è:")
    context.user_data["admin_action"] = "adding_driver"
    context.user_data["driver_data"] = {}

async def add_car_start(update, context):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–∞—à–∏–Ω—ã:")
    context.user_data["admin_action"] = "adding_car"
    context.user_data["car_data"] = {}

async def delete_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        if update.message:
            await update.message.delete()
    except Exception as e:
        print(f"Error deleting messages: {e}")