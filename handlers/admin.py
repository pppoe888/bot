from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car, Shift, CargoItem, ShiftPhoto
from keyboards import get_admin_inline_keyboard, get_manage_drivers_keyboard, get_manage_logists_keyboard, get_manage_cars_keyboard
async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        if update.message:
            await update.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    text = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    await update.callback_query.answer()



# === –ù–û–í–´–ï –†–ê–ó–î–ï–õ–´ –ê–î–ú–ò–ù–ö–ò ===

async def admin_cars_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–¥–µ–ª –∞–≤—Ç–æ–º–æ–±–∏–ª–∏"""
    from keyboards import get_admin_cars_keyboard

    text = "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏"

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_admin_cars_keyboard()
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=get_admin_cars_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    await update.callback_query.answer()

async def admin_employees_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–¥–µ–ª —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"""
    from keyboards import get_admin_employees_keyboard

    text = "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_admin_employees_keyboard()
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=get_admin_employees_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    await update.callback_query.answer()

async def admin_shifts_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–¥–µ–ª —Å–º–µ–Ω—ã"""
    from keyboards import get_admin_shifts_keyboard

    text = "–†–∞–∑–¥–µ–ª: –°–º–µ–Ω—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_admin_shifts_keyboard()
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=get_admin_shifts_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    await update.callback_query.answer()

async def admin_reports_section(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–¥–µ–ª –æ—Ç—á–µ—Ç—ã"""
    from keyboards import get_admin_reports_keyboard

    text = "–†–∞–∑–¥–µ–ª: –û—Ç—á–µ—Ç—ã\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_admin_reports_keyboard()
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=get_admin_reports_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    await update.callback_query.answer()



async def employees_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º"""
    from keyboards import get_admin_employees_keyboard

    db = SessionLocal()
    try:
        drivers_count = db.query(User).filter(User.role == "driver").count()
        logists_count = db.query(User).filter(User.role == "logist").count()
        active_drivers = db.query(Shift).filter(Shift.is_active == True).count()

        text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º\n\n"
        text += f"–í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {drivers_count}\n"
        text += f"–ù–∞ —Å–º–µ–Ω–µ: {active_drivers}\n"
        text += f"–õ–æ–≥–∏—Å—Ç–æ–≤: {logists_count}"

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_admin_employees_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_admin_employees_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await update.callback_query.answer()

async def shifts_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–º–µ–Ω–∞–º"""
    from keyboards import get_admin_shifts_keyboard

    db = SessionLocal()
    try:
        active_shifts = db.query(Shift).filter(Shift.is_active == True).count()
        total_shifts = db.query(Shift).count()
        completed_shifts = total_shifts - active_shifts

        text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–º–µ–Ω–∞–º\n\n"
        text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω: {active_shifts}\n"
        text += f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Å–º–µ–Ω: {completed_shifts}\n"
        text += f"–í—Å–µ–≥–æ —Å–º–µ–Ω: {total_shifts}"

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_admin_shifts_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_admin_shifts_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await update.callback_query.answer()

async def view_car_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Å–º–µ–Ω—ã"""
    from keyboards import get_back_to_shift_keyboard

    query = update.callback_query
    shift_id = int(query.data.split("_")[3])

    db = SessionLocal()
    try:
        shift = db.query(Shift).filter(Shift.id == shift_id).first()

        if not shift:
            await query.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        car = shift.car
        text = f"üöó –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï\n\n"
        text += f"üìã –ù–æ–º–µ—Ä: {car.number}\n"
        text += f"üè≠ –ú–∞—Ä–∫–∞: {car.brand or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        text += f"üöô –ú–æ–¥–µ–ª—å: {car.model or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        text += f"‚õΩ –¢–æ–ø–ª–∏–≤–æ: {car.fuel or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        text += f"üõ£Ô∏è –ü—Ä–æ–±–µ–≥: {car.current_mileage} –∫–º\n"
        text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {car.created_at.strftime('%d.%m.%Y')}"

        try:
            await query.edit_message_text(
                text=text,
                reply_markup=get_back_to_shift_keyboard(shift_id)
            )
        except:
            message = await query.message.reply_text(
                text=text,
                reply_markup=get_back_to_shift_keyboard(shift_id)
            )
            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await query.answer()

async def view_delivered_items(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    from keyboards import get_back_to_shift_keyboard

    query = update.callback_query
    shift_id = int(query.data.split("_")[2])

    db = SessionLocal()
    try:
        # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ
        # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
        cargo_items = db.query(CargoItem).filter(
            CargoItem.shift_id == shift_id,
            CargoItem.is_loaded == True
        ).all()

        if not cargo_items:
            text = "üöö –î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            text = f"üöö –î–û–°–¢–ê–í–õ–ï–ù–ù–´–ï –¢–û–í–ê–†–´ (–°–º–µ–Ω–∞ #{shift_id})\n\n"

            for item in cargo_items:
                text += f"‚úÖ {item.item_number} - {item.item_name}\n"
                if item.loaded_at:
                    text += f"   üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω: {item.loaded_at.strftime('%d.%m.%Y %H:%M')}\n"
                text += "\n"

        try:
            await query.edit_message_text(
                text=text,
                reply_markup=get_back_to_shift_keyboard(shift_id)
            )
        except:
            message = await query.message.reply_text(
                text=text,
                reply_markup=get_back_to_shift_keyboard(shift_id)
            )
            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await query.answer()

async def view_shift_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã"""
    query = update.callback_query
    shift_id = int(query.data.split("_")[2])

    db = SessionLocal()
    try:
        shift = db.query(Shift).filter(Shift.id == shift_id).first()

        if not shift:
            await query.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        driver = shift.driver
        car = shift.car

        status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if shift.is_active else "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"

        text = f"üìã –î–ï–¢–ê–õ–ò –°–ú–ï–ù–´ #{shift.id}\n\n"
        text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {driver.name}\n"
        text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {driver.phone}\n"
        text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car.number}"
        if car.brand:
            text += f" ({car.brand}"
            if car.model:
                text += f" {car.model}"
            text += ")"
        text += f"\nüìä –°—Ç–∞—Ç—É—Å: {status}\n"
        text += f"‚è∞ –ù–∞—á–∞–ª–æ: {shift.start_time.strftime('%d.%m.%Y %H:%M')}\n"

        if shift.end_time:
            text += f"‚è∞ –û–∫–æ–Ω—á–∞–Ω–∏–µ: {shift.end_time.strftime('%d.%m.%Y %H:%M')}\n"
            duration = shift.end_time - shift.start_time
            text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration.total_seconds() / 3600:.1f} —á"

        from keyboards import get_shift_details_keyboard
        try:
            await query.edit_message_text(
                text=text,
                reply_markup=get_shift_details_keyboard(shift_id)
            )
        except:
            message = await query.message.reply_text(
                text=text,
                reply_markup=get_shift_details_keyboard(shift_id)
            )
            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await query.answer()

async def view_shift_inspection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Å–º–æ—Ç—Ä–∞ —Å–º–µ–Ω—ã"""
    query = update.callback_query
    shift_id = int(query.data.split("_")[2])

    db = SessionLocal()
    try:
        shift = db.query(Shift).filter(Shift.id == shift_id).first()
        photos = db.query(ShiftPhoto).filter(ShiftPhoto.shift_id == shift_id).all()

        if not shift:
            await query.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        if not photos:
            text = f"üì∏ –§–û–¢–û –û–°–ú–û–¢–†–ê\n\n"
            text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {shift.driver.name}\n"
            text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {shift.car.number}\n\n"
            text += "‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

            try:
                await query.edit_message_text(
                    text=text,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–º–µ–Ω–µ", callback_data=f"view_shift_{shift_id}")
                    ]])
                )
            except:
                message = await query.message.reply_text(
                    text=text,
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–º–µ–Ω–µ", callback_data=f"view_shift_{shift_id}")
                    ]])
                )
                context.user_data["last_message_id"] = message.message_id
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ
            photo_names = {
                'front': 'üöó –°–ø–µ—Ä–µ–¥–∏',
                'back': 'üöô –°–∑–∞–¥–∏', 
                'left': '‚¨ÖÔ∏è –õ–µ–≤—ã–π –±–æ—Ä—Ç',
                'right': '‚û°Ô∏è –ü—Ä–∞–≤—ã–π –±–æ—Ä—Ç',
                'oil': 'üõ¢Ô∏è –£—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞',
                'coolant': '‚ùÑÔ∏è –û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å',
                'interior': 'ü™ë –°–∞–ª–æ–Ω'
            }

            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            try:
                await query.edit_message_text(
                    text=f"üì∏ –§–û–¢–û–ì–†–ê–§–ò–ò –û–°–ú–û–¢–†–ê (–°–º–µ–Ω–∞ #{shift_id})",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–º–µ–Ω–µ", callback_data=f"view_shift_{shift_id}")
                    ]])
                )
            except:
                pass

            # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            for i, photo in enumerate(photos, 1):
                photo_name = photo_names.get(photo.photo_type, photo.photo_type)
                try:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=photo.file_id,
                        caption=f"{photo_name} | üë§ {shift.driver.name} | üöó {shift.car.number}\nüìä –§–æ—Ç–æ {i} –∏–∑ {len(photos)}"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {photo_name}"
                    )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\nüë§ –í–æ–¥–∏—Ç–µ–ª—å: {shift.driver.name}\nüöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {shift.car.number}\nüì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(photos)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–º–µ–Ω–µ", callback_data=f"view_shift_{shift_id}")
                ]])
            )

    finally:
        db.close()

    await query.answer()

async def view_shift_cargo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å–º–µ–Ω—ã"""
    from keyboards import get_back_to_shift_keyboard

    query = update.callback_query
    shift_id = int(query.data.split("_")[2])

    db = SessionLocal()
    try:
        cargo_items = db.query(CargoItem).filter(
            CargoItem.shift_id == shift_id,
            CargoItem.is_loaded == True
        ).all()

        if not cargo_items:
            text = "üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            text = f"üì¶ –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –¢–û–í–ê–†–´ (–°–º–µ–Ω–∞ #{shift_id})\n\n"

            for item in cargo_items:
                text += f"‚úÖ {item.item_number} - {item.item_name}\n"
                if item.loaded_at:
                    text += f"   üìÖ –ó–∞–≥—Ä—É–∂–µ–Ω: {item.loaded_at.strftime('%d.%m.%Y %H:%M')}\n"
                text += "\n"

        try:
            await query.edit_message_text(
                text=text,
                reply_markup=get_back_to_shift_keyboard(shift_id)
            )
        except:
            message = await query.message.reply_text(
                text=text,
                reply_markup=get_back_to_shift_keyboard(shift_id)
            )
            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await query.answer()

async def active_shifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω"""
    from keyboards import get_admin_shifts_keyboard

    db = SessionLocal()
    try:
        active_shifts_list = db.query(Shift).filter(Shift.is_active == True).all()

        if not active_shifts_list:
            text = "üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω –Ω–µ—Ç"
            keyboard = get_admin_shifts_keyboard()
        else:
            text = "üöõ –ê–ö–¢–ò–í–ù–´–ï –°–ú–ï–ù–´:\n\n"

            for shift in active_shifts_list:
                driver = shift.driver
                car = shift.car

                car_info = f"{car.number}"
                if car.brand:
                    car_info += f" ({car.brand}"
                    if car.model:
                        car_info += f" {car.model}"
                    car_info += ")"

                text += f"üë§ {driver.name}\n"
                text += f"üöó {car_info}\n"
                text += f"‚è∞ –ù–∞—á–∞–ª–æ: {shift.start_time.strftime('%H:%M')}\n"

                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
                loaded_items = db.query(CargoItem).filter(
                    CargoItem.shift_id == shift.id,
                    CargoItem.is_loaded == True
                ).all()

                if loaded_items:
                    text += f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ({len(loaded_items)} —à—Ç.):\n"
                    for item in loaded_items:
                        text += f"   ‚úÖ {item.item_number} - {item.item_name}\n"
                else:
                    text += "üì¶ –¢–æ–≤–∞—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ –æ—Å–º–æ—Ç—Ä–∞
                photos_count = db.query(ShiftPhoto).filter(ShiftPhoto.shift_id == shift.id).count()
                if photos_count > 0:
                    text += f"üì∏ –§–æ—Ç–æ –æ—Å–º–æ—Ç—Ä–∞: {photos_count} —à—Ç.\n"
                else:
                    text += "üì∏ –§–æ—Ç–æ –æ—Å–º–æ—Ç—Ä–∞: –Ω–µ—Ç\n"

                text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã
            keyboard = []
            for shift in active_shifts_list:
                driver_name = shift.driver.name
                car_number = shift.car.number

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π —Å–º–µ–Ω—ã
                keyboard.append([
                    InlineKeyboardButton(f"üì∏ –§–æ—Ç–æ –æ—Å–º–æ—Ç—Ä–∞ - {driver_name}", callback_data=f"show_photos_{shift.id}"),
                    InlineKeyboardButton(f"üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ - {driver_name}", callback_data=f"view_cargo_{shift.id}")
                ])

            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_shifts_section")])
            keyboard = InlineKeyboardMarkup(keyboard)

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=keyboard
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=keyboard
            )
            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await update.callback_query.answer()

async def show_inspection_photos_in_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Å–º–æ—Ç—Ä–∞ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    query = update.callback_query
    shift_id = int(query.data.split("_")[2])

    db = SessionLocal()
    try:
        shift = db.query(Shift).filter(Shift.id == shift_id).first()
        photos = db.query(ShiftPhoto).filter(ShiftPhoto.shift_id == shift_id).all()

        if not shift:
            await query.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        if not photos:
            text = f"üì∏ –§–û–¢–û –û–°–ú–û–¢–†–ê\n\n"
            text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {shift.driver.name}\n"
            text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {shift.car.number}\n\n"
            text += "‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_active_shifts" if shift.is_active else "shifts_history")
                ]])
            )
        else:
            # –ì–æ—Ç–æ–≤–∏–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Ñ–æ—Ç–æ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            from telegram import InputMediaPhoto

            media_group = []
            photo_names = {
                'front': 'üöó –ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å',
                'back': 'üöô –ó–∞–¥–Ω—è—è —á–∞—Å—Ç—å',
                'left': '‚¨ÖÔ∏è –õ–µ–≤—ã–π –±–æ—Ä—Ç',
                'right': '‚û°Ô∏è –ü—Ä–∞–≤—ã–π –±–æ—Ä—Ç',
                'oil': 'üõ¢Ô∏è –£—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞',
                'coolant': '‚ùÑÔ∏è –û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å',
                'interior': 'ü™ë –°–∞–ª–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è'
            }

            for i, photo in enumerate(photos):
                photo_name = photo_names.get(photo.photo_type, photo.photo_type)
                caption = f"{photo_name}"

                # –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                if i == 0:
                    caption = f"üì∏ –§–û–¢–û –û–°–ú–û–¢–†–ê\nüë§ {shift.driver.name} | üöó {shift.car.number}\nüìÖ {shift.start_time.strftime('%d.%m.%Y %H:%M')}\n\n{photo_name}"

                media_group.append(InputMediaPhoto(media=photo.file_id, caption=caption))

            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            await query.answer("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
            try:
                await context.bot.send_media_group(
                    chat_id=update.effective_chat.id,
                    media=media_group
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
                await context.bot.send_message(
                    chat_id=update.effective_chat.id,
                    text=f"‚úÖ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\nüì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(photos)}",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="show_active_shifts" if shift.is_active else "shifts_history")
                    ]])
                )

            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
                # –ï—Å–ª–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —Ñ–æ—Ç–æ
                for i, photo in enumerate(photos, 1):
                    photo_name = photo_names.get(photo.photo_type, photo.photo_type)
                    try:
                        await context.bot.send_photo(
                            chat_id=update.effective_chat.id,
                            photo=photo.file_id,
                            caption=f"üì∏ {photo_name}\nüë§ {shift.driver.name} | üöó {shift.car.number}\nüìä –§–æ—Ç–æ {i} –∏–∑ {len(photos)}"
                        )
                    except Exception as photo_error:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {photo_error}")

    finally:
        db.close()

    await query.answer()

async def view_history_shift_inspection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Å–º–æ—Ç—Ä–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–º–µ–Ω"""
    query = update.callback_query
    shift_id = int(query.data.split("_")[3])

    db = SessionLocal()
    try:
        shift = db.query(Shift).filter(Shift.id == shift_id).first()
        photos = db.query(ShiftPhoto).filter(ShiftPhoto.shift_id == shift_id).all()

        if not shift:
            await query.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        if not photos:
            text = f"üì∏ –§–û–¢–û –û–°–ú–û–¢–†–ê\n\n"
            text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {shift.driver.name}\n"
            text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {shift.car.number}\n\n"
            text += "‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∏—Å—Ç–æ—Ä–∏–∏ —Å–º–µ–Ω", callback_data="shifts_history")
                ]])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            text = f"üì∏ –§–û–¢–û –û–°–ú–û–¢–†–ê\n\n"
            text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {shift.driver.name}\n"
            text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {shift.car.number}\n"
            text += f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {shift.start_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            text += f"üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —á–∞—Ç..."

            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω—ã–º —Å–º–µ–Ω–∞–º", callback_data="active_shifts")
                ]])
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç
            photo_names = {
                'front': 'üöó –ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å',
                'back': 'üöô –ó–∞–¥–Ω—è—è —á–∞—Å—Ç—å', 
                'left': '‚¨ÖÔ∏è –õ–µ–≤—ã–π –±–æ—Ä—Ç',
                'right': '‚û°Ô∏è –ü—Ä–∞–≤—ã–π –±–æ—Ä—Ç',
                'oil': 'üõ¢Ô∏è –£—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞',
                'coolant': '‚ùÑÔ∏è –û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å',
                'interior': 'ü™ë –°–∞–ª–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è'
            }

            for i, photo in enumerate(photos, 1):
                photo_name = photo_names.get(photo.photo_type, photo.photo_type)
                try:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=photo.file_id,
                        caption=f"üì∏ {photo_name}\nüë§ {shift.driver.name} | üöó {shift.car.number}\nüìä –§–æ—Ç–æ {i} –∏–∑ {len(photos)}"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {photo_name}"
                    )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\nüë§ –í–æ–¥–∏—Ç–µ–ª—å: {shift.driver.name}\nüöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {shift.car.number}\nüì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(photos)}"
            )

    finally:
        db.close()

    await query.answer()

async def view_active_shift_inspection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã"""
    query = update.callback_query
    shift_id = int(query.data.split("_")[3])

    db = SessionLocal()
    try:
        shift = db.query(Shift).filter(Shift.id == shift_id).first()
        photos = db.query(ShiftPhoto).filter(ShiftPhoto.shift_id == shift_id).all()

        if not shift:
            await query.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        if not photos:
            text = f"üì∏ –§–û–¢–û –û–°–ú–û–¢–†–ê\n\n"
            text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {shift.driver.name}\n"
            text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {shift.car.number}\n\n"
            text += "‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"

            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω—ã–º —Å–º–µ–Ω–∞–º", callback_data="show_active_shifts")
                ]])
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            text = f"üì∏ –§–û–¢–û –û–°–ú–û–¢–†–ê\n\n"
            text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {shift.driver.name}\n"
            text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {shift.car.number}\n"
            text += f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {shift.start_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            text += f"üì∏ –û—Ç–ø—Ä–∞–≤–ª—è—é {len(photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —á–∞—Ç..."

            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω—ã–º —Å–º–µ–Ω–∞–º", callback_data="show_active_shifts")
                ]])
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ
            photo_names = {
                'front': 'üöó –ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å',
                'back': 'üöô –ó–∞–¥–Ω—è—è —á–∞—Å—Ç—å', 
                'left': '‚¨ÖÔ∏è –õ–µ–≤—ã–π –±–æ—Ä—Ç',
                'right': '‚û°Ô∏è –ü—Ä–∞–≤—ã–π –±–æ—Ä—Ç',
                'oil': 'üõ¢Ô∏è –£—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞',
                'coolant': '‚ùÑÔ∏è –û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å',
                'interior': 'ü™ë –°–∞–ª–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è'
            }

            for i, photo in enumerate(photos, 1):
                photo_name = photo_names.get(photo.photo_type, photo.photo_type)
                try:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=photo.file_id,
                        caption=f"üì∏ {photo_name}\nüë§ {shift.driver.name} | üöó {shift.car.number}\nüìä –§–æ—Ç–æ {i} –∏–∑ {len(photos)}"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: {photo_name}"
                    )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n\nüë§ –í–æ–¥–∏—Ç–µ–ª—å: {shift.driver.name}\nüöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {shift.car.number}\nüì∏ –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: {len(photos)}"
            )

    finally:
        db.close()

    await query.answer()

async def view_active_shift_cargo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã"""
    query = update.callback_query
    shift_id = int(query.data.split("_")[2])

    db = SessionLocal()
    try:
        shift = db.query(Shift).filter(Shift.id == shift_id).first()

        if not shift:
            await query.answer("–°–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ (–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏ –Ω–µ–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ)
        all_items = db.query(CargoItem).filter(CargoItem.shift_id == shift_id).all()
        loaded_items = [item for item in all_items if item.is_loaded]
        pending_items = [item for item in all_items if not item.is_loaded]

        text = f"üì¶ –°–û–°–¢–û–Ø–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò\n\n"
        text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {shift.driver.name}\n"
        text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {shift.car.number}\n"
        text += f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {shift.start_time.strftime('%d.%m.%Y %H:%M')}\n\n"

        if loaded_items:
            text += f"‚úÖ –ó–ê–ì–†–£–ñ–ï–ù–û ({len(loaded_items)} —à—Ç.):\n"
            for item in loaded_items:
                load_time = item.loaded_at.strftime('%H:%M') if item.loaded_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                text += f"   ‚Ä¢ {item.item_number} - {item.item_name}\n"
                text += f"     ‚è∞ –ó–∞–≥—Ä—É–∂–µ–Ω –≤ {load_time}\n"
            text += "\n"

        if pending_items:
            text += f"‚è≥ –û–ñ–ò–î–ê–ï–¢ –ó–ê–ì–†–£–ó–ö–ò ({len(pending_items)} —à—Ç.):\n"
            for item in pending_items:
                text += f"   ‚Ä¢ {item.item_number} - {item.item_name}\n"
            text += "\n"

        if not all_items:
            text += "‚ùå –¢–æ–≤–∞—Ä—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã"

        text += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {len(loaded_items)}/{len(all_items)} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

        await query.edit_message_text(
            text=text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö –∞–∫—Ç–∏–≤–Ω—ã–º —Å–º–µ–Ω–∞–º", callback_data="active_shifts")
            ]])
        )
    finally:
        db.close()

    await query.answer()

async def shifts_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω"""
    from keyboards import get_shifts_history_keyboard

    db = SessionLocal()
    try:
        shifts = db.query(Shift).order_by(Shift.start_time.desc()).limit(20).all()

        if not shifts:
            text = "üìã –ò—Å—Ç–æ—Ä–∏—è —Å–º–µ–Ω –ø—É—Å—Ç–∞"
            keyboard = get_admin_shifts_keyboard()
        else:
            text = "üìã –ò–°–¢–û–†–ò–Ø –°–ú–ï–ù\n\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–º–µ–Ω (–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π):"
            keyboard = get_shifts_history_keyboard(shifts)

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=keyboard
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=keyboard
            )
            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

    await update.callback_query.answer()