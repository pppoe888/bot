from telegram import Update
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car, Shift
from keyboards import get_admin_inline_keyboard, get_manage_drivers_keyboard, get_manage_logists_keyboard, get_manage_cars_keyboard

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    try:
        if update.message:
            await update.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    text = "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id

    await update.callback_query.answer()

async def manage_drivers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏"""
    db = SessionLocal()
    try:
        drivers = db.query(User).filter(User.role == "driver").all()

        text = "üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏\n\n"
        if drivers:
            for driver in drivers:
                text += f"‚Ä¢ {driver.name} ({driver.phone})\n"
        else:
            text += "–í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_manage_drivers_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_manage_drivers_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id

    finally:
        db.close()

    await update.callback_query.answer()

async def manage_cars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏"""
    db = SessionLocal()
    try:
        cars = db.query(Car).all()

        text = "üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏\n\n"
        if cars:
            for car in cars:
                text += f"‚Ä¢ {car.number}"
                if car.brand:
                    text += f" ({car.brand}"
                    if car.model:
                        text += f" {car.model}"
                    text += ")"
                text += "\n"
        else:
            text += "–ú–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_manage_cars_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_manage_cars_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id

    finally:
        db.close()

    await update.callback_query.answer()

async def manage_logists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞–º–∏"""
    db = SessionLocal()
    try:
        logists = db.query(User).filter(User.role == "logist").all()

        text = "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞–º–∏\n\n"
        if logists:
            for logist in logists:
                text += f"‚Ä¢ {logist.name} ({logist.phone})\n"
        else:
            text += "–õ–æ–≥–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_manage_logists_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_manage_logists_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id

    finally:
        db.close()

    await update.callback_query.answer()

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    db = SessionLocal()
    try:
        drivers_count = db.query(User).filter(User.role == "driver").count()
        logists_count = db.query(User).filter(User.role == "logist").count()
        cars_count = db.query(Car).count()
        active_shifts = db.query(Shift).filter(Shift.is_active == True).count()

        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        text += f"üë§ –í–æ–¥–∏—Ç–µ–ª–∏: {drivers_count}\n"
        text += f"üìã –õ–æ–≥–∏—Å—Ç—ã: {logists_count}\n"
        text += f"üöó –ú–∞—à–∏–Ω—ã: {cars_count}\n"
        text += f"üöõ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã: {active_shifts}"

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_admin_inline_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_admin_inline_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id

    finally:
        db.close()

    await update.callback_query.answer()

async def admin_panel_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await delete_previous_messages(update, context)

    text = "üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    message = await update.message.reply_text(
        text=text,
        reply_markup=get_admin_inline_keyboard()
    )
    context.user_data["last_message_id"] = message.message_id

async def manage_cars_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await delete_previous_messages(update, context)

    db = SessionLocal()
    try:
        cars = db.query(Car).all()

        text = "üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏\n\n"
        if cars:
            for car in cars:
                text += f"‚Ä¢ {car.number}"
                if car.brand:
                    text += f" ({car.brand}"
                    if car.model:
                        text += f" {car.model}"
                    text += ")"
                text += "\n"
        else:
            text += "–ú–∞—à–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        message = await update.message.reply_text(
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def admin_stats_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    await delete_previous_messages(update, context)

    db = SessionLocal()
    try:
        drivers_count = db.query(User).filter(User.role == "driver").count()
        logists_count = db.query(User).filter(User.role == "logist").count()
        cars_count = db.query(Car).count()

        text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
        text += f"üë§ –í–æ–¥–∏—Ç–µ–ª–∏: {drivers_count}\n"
        text += f"üìã –õ–æ–≥–∏—Å—Ç—ã: {logists_count}\n"
        text += f"üöó –ú–∞—à–∏–Ω—ã: {cars_count}"

        message = await update.message.reply_text(
            text=text,
            reply_markup=get_admin_inline_keyboard()
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()