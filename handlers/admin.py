
from telegram import Update
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car
from keyboards import get_admin_inline_keyboard, get_manage_drivers_keyboard, get_manage_cars_keyboard, get_manage_logists_keyboard

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    await update.callback_query.answer()

    text = "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_admin_inline_keyboard()

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=keyboard
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=keyboard
        )
        context.user_data["last_message_id"] = message.message_id

async def manage_drivers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏"""
    await update.callback_query.answer()

    text = "üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_manage_drivers_keyboard()

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=keyboard
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=keyboard
        )
        context.user_data["last_message_id"] = message.message_id

async def manage_cars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏"""
    await update.callback_query.answer()

    text = "üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_manage_cars_keyboard()

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=keyboard
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=keyboard
        )
        context.user_data["last_message_id"] = message.message_id

async def manage_logists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞–º–∏"""
    await update.callback_query.answer()

    text = "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_manage_logists_keyboard()

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=keyboard
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=keyboard
        )
        context.user_data["last_message_id"] = message.message_id

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞"""
    await update.callback_query.answer()

    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        drivers_count = db.query(User).filter(User.role == "driver").count()
        logists_count = db.query(User).filter(User.role == "logist").count()
        cars_count = db.query(Car).count()

        text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n\n"
        text += f"üë• –í–æ–¥–∏—Ç–µ–ª–µ–π: {drivers_count}\n"
        text += f"üìã –õ–æ–≥–∏—Å—Ç–æ–≤: {logists_count}\n"
        text += f"üöó –ú–∞—à–∏–Ω: {cars_count}"

        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_admin_inline_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_admin_inline_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id

    except Exception as e:
        text = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"
        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=get_admin_inline_keyboard()
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=get_admin_inline_keyboard()
            )
            context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()
