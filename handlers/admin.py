from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car, Shift
from config import ADMIN_ID
from keyboards import get_admin_inline_keyboard, get_manage_drivers_keyboard, get_manage_cars_keyboard, get_manage_logists_keyboard

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –Ω–∞—Å—Ç–æ—è—â–∏–π –∞–¥–º–∏–Ω
    if update.effective_user.id != ADMIN_ID:
        if update.callback_query:
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return

    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )

        if update.message:
            await update.message.delete()
    except:
        pass

    text = "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_admin_inline_keyboard()

    if update.callback_query:
        try:
            await update.callback_query.edit_message_text(
                text=text,
                reply_markup=keyboard
            )
        except:
            message = await update.callback_query.message.reply_text(
                text=text,
                reply_markup=keyboard
            )
            context.user_data["last_message_id"] = message.message_id
        await update.callback_query.answer()
    else:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=keyboard
        )
        context.user_data["last_message_id"] = message.message_id

async def manage_drivers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏"""
    await update.callback_query.answer()

    text = "üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_manage_drivers_keyboard()

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=keyboard
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=keyboard
        )
        context.user_data["last_message_id"] = message.message_id

async def manage_cars(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏"""
    await update.callback_query.answer()

    text = "üöó –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_manage_cars_keyboard()

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=keyboard
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=keyboard
        )
        context.user_data["last_message_id"] = message.message_id

async def manage_logists(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞–º–∏"""
    await update.callback_query.answer()

    text = "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Å—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    keyboard = get_manage_logists_keyboard()

    try:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=keyboard
        )
    except:
        message = await update.callback_query.message.reply_text(
            text=text,
            reply_markup=keyboard
        )
        context.user_data["last_message_id"] = message.message_id

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–¥–º–∏–Ω–∞"""
    await update.callback_query.answer()

    db = SessionLocal()
    try:
        drivers_count = db.query(User).filter(User.role == "driver").count()
        logists_count = db.query(User).filter(User.role == "logist").count()
        cars_count = db.query(Car).count()
        active_shifts = db.query(Shift).filter(Shift.end_time.is_(None)).count()
    finally:
        db.close()

    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
    text += f"üë• –í–æ–¥–∏—Ç–µ–ª–µ–π: {drivers_count}\n"
    text += f"üìã –õ–æ–≥–∏—Å—Ç–æ–≤: {logists_count}\n"
    text += f"üöó –ú–∞—à–∏–Ω: {cars_count}\n"
    text += f"üöõ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω: {active_shifts}\n"

    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ]

    try:
        await update.callback_query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        if "Message is not modified" in str(e):
            await update.callback_query.answer()
        else:
            await update.callback_query.message.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )