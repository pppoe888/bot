
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car, Shift, ShiftPhoto
from keyboards import get_driver_menu, get_problem_keyboard
from datetime import datetime
import states

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        if update.message:
            await update.message.delete()
    except:
        pass

async def driver_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == user_id, User.role == "driver").first()
        if not user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ—Å–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º
            await request_contact(update, context)
            return
            
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        await show_driver_menu(update, context, user.name)
        
    finally:
        db.close()

async def request_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    from telegram import ReplyKeyboardMarkup, KeyboardButton
    
    await delete_previous_messages(update, context)
    
    text = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
    text += "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.\n"
    text += "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É."
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_keyboard = ReplyKeyboardMarkup(
        [[KeyboardButton("üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=contact_keyboard
    )
    context.user_data["last_message_id"] = message.message_id

async def show_driver_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user_name: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è"""
    await delete_previous_messages(update, context)
    
    text = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_name}!\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton("üîç –û—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è", callback_data="car_inspection")],
        [InlineKeyboardButton("‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ", callback_data="report_problem")],
        [InlineKeyboardButton("üìä –ú–æ–∏ —Å–º–µ–Ω—ã", callback_data="my_shifts")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        reply_markup=reply_markup
    )
    context.user_data["last_message_id"] = message.message_id

async def car_inspection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –æ—Å–º–æ—Ç—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    db = SessionLocal()
    
    try:
        user = db.query(User).filter(User.telegram_id == user_id, User.role == "driver").first()
        if not user:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É
        active_shift = db.query(Shift).filter(
            Shift.driver_id == user.id,
            Shift.is_active == True
        ).first()
        
        if active_shift:
            text = "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞!\n\n"
            text += "–ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Å–º–µ–Ω—É –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –æ—Å–º–æ—Ç—Ä–æ–º."
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
        busy_car_ids = db.query(Shift.car_id).filter(Shift.is_active == True).all()
        busy_ids = [car_id[0] for car_id in busy_car_ids]
        available_cars = db.query(Car).filter(~Car.id.in_(busy_ids)).all()
        
        if not available_cars:
            text = "‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
            await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        text = "üöó –í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞:\n\n"
        
        keyboard = []
        for car in available_cars:
            car_name = car.number
            if car.brand:
                car_name += f" ({car.brand}"
                if car.model:
                    car_name += f" {car.model}"
                car_name += ")"
            keyboard.append([InlineKeyboardButton(car_name, callback_data=f"select_car_{car.id}")])
            
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
        await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))
        
    finally:
        db.close()

async def select_car_for_inspection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    car_id = int(query.data.split("_")[2])
    user_id = update.effective_user.id
    
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == user_id, User.role == "driver").first()
        car = db.query(Car).filter(Car.id == car_id).first()
        
        if not user or not car:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—à–∏–Ω–∞ –µ—â–µ —Å–≤–æ–±–æ–¥–Ω–∞
        existing_shift = db.query(Shift).filter(
            Shift.car_id == car_id,
            Shift.is_active == True
        ).first()
        
        if existing_shift:
            await query.edit_message_text("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å —É–∂–µ –∑–∞–Ω—è—Ç!")
            return
            
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–º–µ–Ω—É –¥–ª—è –æ—Å–º–æ—Ç—Ä–∞
        temp_shift = Shift(
            driver_id=user.id,
            car_id=car_id,
            start_time=datetime.now(),
            is_active=False  # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–º–æ—Ç—Ä–∞
        )
        
        db.add(temp_shift)
        db.commit()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–∏
        context.user_data["inspection_shift_id"] = temp_shift.id
        context.user_data["inspection_car_id"] = car_id
        context.user_data["current_photo_step"] = "front"
        
        car_info = car.number
        if car.brand:
            car_info += f" ({car.brand}"
            if car.model:
                car_info += f" {car.model}"
            car_info += ")"
            
        text = f"üì∏ –û–°–ú–û–¢–† –ê–í–¢–û–ú–û–ë–ò–õ–Ø\n\n"
        text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}\n\n"
        text += "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:\n"
        text += "1Ô∏è‚É£ –ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å\n"
        text += "2Ô∏è‚É£ –ó–∞–¥–Ω—è—è —á–∞—Å—Ç—å\n"
        text += "3Ô∏è‚É£ –õ–µ–≤—ã–π –±–æ—Ä—Ç\n"
        text += "4Ô∏è‚É£ –ü—Ä–∞–≤—ã–π –±–æ—Ä—Ç\n"
        text += "5Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞\n"
        text += "6Ô∏è‚É£ –£—Ä–æ–≤–µ–Ω—å –∞–Ω—Ç–∏—Ñ—Ä–∏–∑–∞\n"
        text += "7Ô∏è‚É£ –°–∞–ª–æ–Ω –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n"
        text += "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ü–ï–†–ï–î–ù–ï–ô —á–∞—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
        
        await query.edit_message_text(text=text)
        
    finally:
        db.close()

async def handle_inspection_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ –æ—Å–º–æ—Ç—Ä–µ"""
    if not update.message or not update.message.photo:
        return False
        
    shift_id = context.user_data.get("inspection_shift_id")
    current_step = context.user_data.get("current_photo_step")
    
    if not shift_id or not current_step:
        return False
        
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    
    db = SessionLocal()
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ
        shift_photo = ShiftPhoto(
            shift_id=shift_id,
            photo_type=current_step,
            file_id=photo.file_id
        )
        
        db.add(shift_photo)
        db.commit()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
        try:
            await update.message.delete()
        except:
            pass
            
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        photo_steps = {
            "front": ("back", "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ó–ê–î–ù–ï–ô —á–∞—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
            "back": ("left", "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –õ–ï–í–û–ì–û –±–æ—Ä—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
            "left": ("right", "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ü–†–ê–í–û–ì–û –±–æ—Ä—Ç–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
            "right": ("oil", "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —É—Ä–æ–≤–Ω—è –ú–ê–°–õ–ê"),
            "oil": ("coolant", "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —É—Ä–æ–≤–Ω—è –ê–ù–¢–ò–§–†–ò–ó–ê"),
            "coolant": ("interior", "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –°–ê–õ–û–ù–ê –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
            "interior": (None, "")
        }
        
        next_step, next_text = photo_steps.get(current_step, (None, ""))
        
        if next_step:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–æ—Ç–æ
            context.user_data["current_photo_step"] = next_step
            
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n{next_text}"
            )
            context.user_data["last_message_id"] = message.message_id
        else:
            # –í—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Å–º–æ—Ç—Ä
            await complete_inspection(update, context)
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
    finally:
        db.close()
        
    return True

async def complete_inspection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Å–º–æ—Ç—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
    shift_id = context.user_data.get("inspection_shift_id")
    
    if not shift_id:
        return
        
    db = SessionLocal()
    try:
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–º–µ–Ω—É
        shift = db.query(Shift).filter(Shift.id == shift_id).first()
        if shift:
            shift.is_active = True
            shift.start_time = datetime.now()
            db.commit()
            
            car_info = shift.car.number
            if shift.car.brand:
                car_info += f" ({shift.car.brand"
                if shift.car.model:
                    car_info += f" {shift.car.model}"
                car_info += ")"
                
            text = "‚úÖ –û–°–ú–û–¢–† –ó–ê–í–ï–†–®–ï–ù!\n\n"
            text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}\n"
            text += f"‚è∞ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞: {shift.start_time.strftime('%H:%M')}\n\n"
            text += "–í—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
            text += "–ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            from config import ADMIN_ID
            try:
                admin_text = f"üöó –ù–û–í–ê–Ø –°–ú–ï–ù–ê –ù–ê–ß–ê–¢–ê\n\n"
                admin_text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {shift.driver.name}\n"
                admin_text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_info}\n"
                admin_text += f"‚è∞ –í—Ä–µ–º—è: {shift.start_time.strftime('%d.%m.%Y %H:%M')}\n"
                admin_text += f"üì∏ –§–æ—Ç–æ –æ—Å–º–æ—Ç—Ä–∞: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                
                await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text)
            except:
                pass
                
            keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            context.user_data["last_message_id"] = message.message_id
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop("inspection_shift_id", None)
            context.user_data.pop("inspection_car_id", None)
            context.user_data.pop("current_photo_step", None)
            
    finally:
        db.close()

async def report_problem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"""
    query = update.callback_query
    await query.answer()
    
    text = "‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:"
    
    keyboard = [
        [InlineKeyboardButton("üöó –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∞—à–∏–Ω–æ–π", callback_data="problem_car")],
        [InlineKeyboardButton("üì¶ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥—Ä—É–∑–æ–º", callback_data="problem_cargo")],
        [InlineKeyboardButton("üõ£Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –¥–æ—Ä–æ–≥–µ", callback_data="problem_road")],
        [InlineKeyboardButton("üìç –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ—á–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="problem_delivery")],
        [InlineKeyboardButton("‚ùì –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞", callback_data="problem_other")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    
    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_problem_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
    query = update.callback_query
    await query.answer()
    
    problem_type = query.data.split("_")[1]
    
    problem_types = {
        "car": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∞—à–∏–Ω–æ–π",
        "cargo": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –≥—Ä—É–∑–æ–º",
        "road": "–ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –¥–æ—Ä–æ–≥–µ", 
        "delivery": "–ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ—á–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏",
        "other": "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
    }
    
    selected_type = problem_types.get(problem_type, "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
    
    text = f"‚ö†Ô∏è –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {selected_type}\n\n"
    text += "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É."
    
    await query.edit_message_text(text=text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.user_data["problem_type"] = selected_type
    context.user_data["awaiting_problem_description"] = True

async def handle_problem_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    if not context.user_data.get("awaiting_problem_description"):
        return False
        
    problem_type = context.user_data.get("problem_type", "–î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
    description = update.message.text
    
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        
        await update.message.delete()
        
        text = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
        text += f"üìã –¢–∏–ø: {problem_type}\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {user.name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n\n"
        text += "–î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        from config import ADMIN_ID
        try:
            admin_text = f"üö® –ù–û–í–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –û–¢ –í–û–î–ò–¢–ï–õ–Ø\n\n"
            admin_text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {user.name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            admin_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            admin_text += f"üìã –¢–∏–ø: {problem_type}\n"
            admin_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            admin_text += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text)
        except:
            pass
            
        keyboard = [[InlineKeyboardButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data["last_message_id"] = message.message_id
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop("problem_type", None)
        context.user_data.pop("awaiting_problem_description", None)
        
        return True
        
    finally:
        db.close()

async def my_shifts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ —Å–º–µ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    db = SessionLocal()
    
    try:
        user = db.query(User).filter(User.telegram_id == user_id, User.role == "driver").first()
        if not user:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        shifts = db.query(Shift).filter(Shift.driver_id == user.id).order_by(Shift.start_time.desc()).limit(10).all()
        
        if not shifts:
            text = "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–º–µ–Ω"
        else:
            text = "üìä –ú–û–ò –°–ú–ï–ù–´\n\n"
            
            for shift in shifts:
                car_info = shift.car.number
                if shift.car.brand:
                    car_info += f" ({shift.car.brand})"
                    
                status = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if shift.is_active else "üî¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∞"
                start_time = shift.start_time.strftime('%d.%m %H:%M')
                
                text += f"üöó {car_info}\n"
                text += f"üìÖ {start_time}\n"
                text += f"üìä {status}\n"
                
                if not shift.is_active and shift.end_time:
                    end_time = shift.end_time.strftime('%d.%m %H:%M')
                    duration = (shift.end_time - shift.start_time).total_seconds() / 3600
                    text += f"üèÅ {end_time}\n"
                    text += f"‚è±Ô∏è {duration:.1f} —á\n"
                    
                text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))
        
    finally:
        db.close()

async def back_to_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    db = SessionLocal()
    
    try:
        user = db.query(User).filter(User.telegram_id == user_id, User.role == "driver").first()
        if not user:
            await request_contact(update, context)
            return
            
        await show_driver_menu(update, context, user.name)
        
    finally:
        db.close()
