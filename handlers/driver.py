from telegram import Update
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car, Shift
from keyboards import get_car_keyboard
from datetime import datetime

async def start_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É –≤–æ–¥–∏—Ç–µ–ª—è"""
    db = SessionLocal()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –≤–æ–¥–∏—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        if not user:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.role != "driver":
            await update.message.reply_text("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º.")
            return

        active_shift = db.query(Shift).filter(
            Shift.driver_id == user.id,
            Shift.is_active == True
        ).first()

        if active_shift:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞!")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω
        cars = db.query(Car).all()

        if not cars:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω.")
            return

        await update.message.reply_text(
            "üöó –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è —Å–º–µ–Ω—ã:",
            reply_markup=get_car_keyboard(cars)
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()

async def select_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã –¥–ª—è —Å–º–µ–Ω—ã"""
    await update.callback_query.answer()

    car_id = int(update.callback_query.data.split("_")[-1])
    db = SessionLocal()

    try:
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        car = db.query(Car).filter(Car.id == car_id).first()

        if not user or not car:
            await update.callback_query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–∞—à–∏–Ω—ã.")
            return

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É
        new_shift = Shift(
            driver_id=user.id,
            car_id=car.id,
            start_time=datetime.utcnow(),
            is_active=True
        )

        db.add(new_shift)
        db.commit()

        car_info = f"{car.number}"
        if car.brand and car.model:
            car_info += f" ({car.brand} {car.model})"

        await update.callback_query.message.reply_text(
            f"‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞!\nüöó –ú–∞—à–∏–Ω–∞: {car_info}\n‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {new_shift.start_time.strftime('%H:%M %d.%m.%Y')}"
        )

    except Exception as e:
        await update.callback_query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã: {e}")
    finally:
        db.close()