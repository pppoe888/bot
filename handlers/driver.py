
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car, Shift
from keyboards import get_driver_menu
from datetime import datetime
import states

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        if update.message:
            await update.message.delete()
    except:
        pass

async def start_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"""
    await delete_previous_messages(update, context)
    
    user_id = update.effective_user.id
    db = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞
        user = db.query(User).filter(User.telegram_id == user_id).first()
        active_shift = db.query(Shift).filter(
            Shift.driver_id == user.id,
            Shift.is_active == True
        ).first()
        
        if active_shift:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π.",
                reply_markup=get_driver_menu()
            )
            context.user_data["last_message_id"] = message.message_id
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω
        cars = db.query(Car).all()
        
        if not cars:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã.",
                reply_markup=get_driver_menu()
            )
            context.user_data["last_message_id"] = message.message_id
            return
        
        keyboard = []
        for car in cars:
            car_text = f"{car.number}"
            if car.brand:
                car_text += f" ({car.brand}"
                if car.model:
                    car_text += f" {car.model}"
                car_text += ")"
            
            keyboard.append([InlineKeyboardButton(
                car_text, 
                callback_data=f"select_car_{car.id}"
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="üöó –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:",
            reply_markup=reply_markup
        )
        context.user_data["last_message_id"] = message.message_id
        
    finally:
        db.close()

async def select_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã –¥–ª—è —Å–º–µ–Ω—ã"""
    query = update.callback_query
    car_id = int(query.data.split("_")[2])
    user_id = update.effective_user.id
    
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        car = db.query(Car).filter(Car.id == car_id).first()
        
        if not user or not car:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ
        context.user_data["selected_car_id"] = car_id
        context.user_data["shift_photos"] = {}
        context.user_data["state"] = states.PHOTO_CAR_FRONT
        
        car_text = f"{car.number}"
        if car.brand:
            car_text += f" ({car.brand}"
            if car.model:
                car_text += f" {car.model}"
            car_text += ")"
        
        text = f"üì∏ –ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤—ã–±—Ä–∞–Ω: {car_text}\n\n"
        text += "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–º–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.\n\n"
        text += "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ü–ï–†–ï–î–ù–ï–ô —á–∞—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n"
        text += "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∞–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞!"
        
        await query.edit_message_text(text=text)
        
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()
    
    await query.answer()

async def show_route(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç –≤–æ–¥–∏—Ç–µ–ª—è"""
    await delete_previous_messages(update, context)
    
    user_id = update.effective_user.id
    db = SessionLocal()
    
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        
        if not user:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_driver_menu()
            )
            context.user_data["last_message_id"] = message.message_id
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–º–µ–Ω—É
        active_shift = db.query(Shift).filter(
            Shift.driver_id == user.id,
            Shift.is_active == True
        ).first()
        
        if not active_shift:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ —Å–º–µ–Ω—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞.",
                reply_markup=get_driver_menu()
            )
            context.user_data["last_message_id"] = message.message_id
            return
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
        text = "üó∫Ô∏è –í–∞—à –º–∞—Ä—à—Ä—É—Ç:\n\n"
        text += "üìç –¢–æ—á–∫–∞ 1: –°–∫–ª–∞–¥ (—É–ª. –°–∫–ª–∞–¥—Å–∫–∞—è, 1)\n"
        text += "üìç –¢–æ—á–∫–∞ 2: –ú–∞–≥–∞–∑–∏–Ω –ê (—É–ª. –¢–æ—Ä–≥–æ–≤–∞—è, 15)\n" 
        text += "üìç –¢–æ—á–∫–∞ 3: –ú–∞–≥–∞–∑–∏–Ω –ë (—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è, 45)\n"
        text += "üìç –¢–æ—á–∫–∞ 4: –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å–∫–ª–∞–¥\n\n"
        text += "üïê –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: 4 —á–∞—Å–∞\n"
        text += "üì¶ –ì—Ä—É–∑: 15 –∫–æ—Ä–æ–±–æ–∫"
        
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_driver_menu()
        )
        context.user_data["last_message_id"] = message.message_id
        
    finally:
        db.close()

async def report_problem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ"""
    await delete_previous_messages(update, context)
    
    keyboard = [
        [InlineKeyboardButton("üöó –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∞—à–∏–Ω–æ–π", callback_data="problem_car")],
        [InlineKeyboardButton("üì¶ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥—Ä—É–∑–æ–º", callback_data="problem_cargo")],
        [InlineKeyboardButton("üõ£Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –¥–æ—Ä–æ–≥–µ", callback_data="problem_road")],
        [InlineKeyboardButton("üè™ –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ—á–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏", callback_data="problem_delivery")],
        [InlineKeyboardButton("‚ùì –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞", callback_data="problem_other")]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:",
        reply_markup=reply_markup
    )
    context.user_data["last_message_id"] = message.message_id

async def handle_problem_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º—ã"""
    query = update.callback_query
    problem_type = query.data.split("_")[1]
    
    problem_types = {
        "car": "üöó –ü—Ä–æ–±–ª–µ–º–∞ —Å –º–∞—à–∏–Ω–æ–π",
        "cargo": "üì¶ –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥—Ä—É–∑–æ–º", 
        "road": "üõ£Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –Ω–∞ –¥–æ—Ä–æ–≥–µ",
        "delivery": "üè™ –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ç–æ—á–∫–µ –¥–æ—Å—Ç–∞–≤–∫–∏",
        "other": "‚ùì –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞"
    }
    
    selected_type = problem_types.get(problem_type, "‚ùì –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
    
    text = f"‚ö†Ô∏è –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: {selected_type}\n\n"
    text += "üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ. –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—É."
    
    await query.edit_message_text(text=text)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.user_data["problem_type"] = selected_type
    context.user_data["awaiting_problem_description"] = True
    
    await query.answer()

async def handle_problem_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    if not context.user_data.get("awaiting_problem_description"):
        return False
        
    problem_type = context.user_data.get("problem_type", "‚ùì –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞")
    description = update.message.text
    
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É/–¥–∏—Å–ø–µ—Ç—á–µ—Ä—É
        
        await update.message.delete()
        
        text = f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
        text += f"‚ö†Ô∏è –¢–∏–ø: {problem_type}\n"
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
        text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {user.name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
        text += f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}\n\n"
        text += "üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
        from config import ADMIN_ID
        try:
            admin_text = f"üö® –ù–û–í–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –û–¢ –í–û–î–ò–¢–ï–õ–Ø\n\n"
            admin_text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {user.name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            admin_text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}\n"
            admin_text += f"‚ö†Ô∏è –¢–∏–ø: {problem_type}\n"
            admin_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            admin_text += f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
            
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_text
            )
        except:
            pass
        
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_driver_menu()
        )
        context.user_data["last_message_id"] = message.message_id
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop("problem_type", None)
        context.user_data.pop("awaiting_problem_description", None)
        
        return True
        
    finally:
        db.close()

async def handle_shift_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã"""
    if not update.message or not update.message.photo:
        return False
    
    current_state = context.user_data.get("state")
    photo_states = [
        states.PHOTO_CAR_FRONT, states.PHOTO_CAR_BACK, 
        states.PHOTO_CAR_LEFT, states.PHOTO_CAR_RIGHT,
        states.PHOTO_COOLANT, states.PHOTO_OIL, states.PHOTO_INTERIOR
    ]
    
    if current_state not in photo_states:
        return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    context.user_data["shift_photos"][current_state] = photo.file_id
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
    try:
        await update.message.delete()
    except:
        pass
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    next_step_map = {
        states.PHOTO_CAR_FRONT: (states.PHOTO_CAR_BACK, "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ó–ê–î–ù–ï–ô —á–∞—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
        states.PHOTO_CAR_BACK: (states.PHOTO_CAR_LEFT, "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –õ–ï–í–û–ô —Å—Ç–æ—Ä–æ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
        states.PHOTO_CAR_LEFT: (states.PHOTO_CAR_RIGHT, "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –ü–†–ê–í–û–ô —Å—Ç–æ—Ä–æ–Ω—ã –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
        states.PHOTO_CAR_RIGHT: (states.PHOTO_COOLANT, "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —É—Ä–æ–≤–Ω—è –û–•–õ–ê–ñ–î–ê–Æ–©–ï–ô –ñ–ò–î–ö–û–°–¢–ò"),
        states.PHOTO_COOLANT: (states.PHOTO_OIL, "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —É—Ä–æ–≤–Ω—è –ú–ê–°–õ–ê"),
        states.PHOTO_OIL: (states.PHOTO_INTERIOR, "üì∑ –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –°–ê–õ–û–ù–ê –∞–≤—Ç–æ–º–æ–±–∏–ª—è"),
        states.PHOTO_INTERIOR: (None, "")
    }
    
    next_state, next_text = next_step_map[current_state]
    
    if next_state:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–æ—Ç–æ
        context.user_data["state"] = next_state
        
        try:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"‚úÖ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!\n\n{next_text}\n\n‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –∫–∞–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞!"
            )
            context.user_data["last_message_id"] = message.message_id
        except:
            pass
    else:
        # –í—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Å–º–µ–Ω—É
        await create_shift_with_photos(update, context)
    
    return True

async def create_shift_with_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    car_id = context.user_data.get("selected_car_id")
    photos = context.user_data.get("shift_photos", {})
    user_id = update.effective_user.id
    
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        car = db.query(Car).filter(Car.id == car_id).first()
        
        if not user or not car:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã!",
                reply_markup=get_driver_menu()
            )
            return
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É
        new_shift = Shift(
            driver_id=user.id,
            car_id=car.id,
            start_time=datetime.now(),
            is_active=True
        )
        
        db.add(new_shift)
        db.commit()
        
        car_text = f"{car.number}"
        if car.brand:
            car_text += f" ({car.brand}"
            if car.model:
                car_text += f" {car.model}"
            car_text += ")"
        
        text = f"‚úÖ –°–º–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞!\n\n"
        text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_text}\n"
        text += f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {new_shift.start_time.strftime('%H:%M')}\n"
        text += f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}/7\n\n"
        text += "–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        from config import ADMIN_ID
        try:
            admin_text = f"üì∏ –ù–û–í–ê–Ø –°–ú–ï–ù–ê –ù–ê–ß–ê–¢–ê\n\n"
            admin_text += f"üë§ –í–æ–¥–∏—Ç–µ–ª—å: {user.name}\n"
            admin_text += f"üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {car_text}\n"
            admin_text += f"üïê –í—Ä–µ–º—è: {new_shift.start_time.strftime('%d.%m.%Y %H:%M')}\n\n"
            admin_text += "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:"
            
            await context.bot.send_message(chat_id=ADMIN_ID, text=admin_text)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            photo_names = {
                states.PHOTO_CAR_FRONT: "–ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å",
                states.PHOTO_CAR_BACK: "–ó–∞–¥–Ω—è—è —á–∞—Å—Ç—å", 
                states.PHOTO_CAR_LEFT: "–õ–µ–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞",
                states.PHOTO_CAR_RIGHT: "–ü—Ä–∞–≤–∞—è —Å—Ç–æ—Ä–æ–Ω–∞",
                states.PHOTO_COOLANT: "–û—Ö–ª–∞–∂–¥–∞—é—â–∞—è –∂–∏–¥–∫–æ—Å—Ç—å",
                states.PHOTO_OIL: "–£—Ä–æ–≤–µ–Ω—å –º–∞—Å–ª–∞",
                states.PHOTO_INTERIOR: "–°–∞–ª–æ–Ω"
            }
            
            for state, photo_id in photos.items():
                photo_name = photo_names.get(state, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                await context.bot.send_photo(
                    chat_id=ADMIN_ID,
                    photo=photo_id,
                    caption=f"üì∑ {photo_name}"
                )
        except:
            pass
        
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_driver_menu()
        )
        context.user_data["last_message_id"] = message.message_id
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        context.user_data.pop("selected_car_id", None)
        context.user_data.pop("shift_photos", None)
        context.user_data.pop("state", None)
        
    except Exception as e:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã: {str(e)}",
            reply_markup=get_driver_menu()
        )
    finally:
        db.close()
