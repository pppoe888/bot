from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car

async def start_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Å–º–µ–Ω—ã –≤–æ–¥–∏—Ç–µ–ª—è"""
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()

        if not user or user.role != "driver":
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω
        cars = db.query(Car).all()

        if not cars:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–∞—à–∏–Ω–∞–º–∏
        keyboard = []
        for car in cars:
            car_text = f"üöó {car.number}"
            if car.model:
                car_text += f" ({car.model})"
            keyboard.append([InlineKeyboardButton(car_text, callback_data=f"select_car_{car.id}")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üöó –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:",
            reply_markup=reply_markup
        )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        db.close()

async def select_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã –¥–ª—è —Å–º–µ–Ω—ã"""
    await update.callback_query.answer()

    car_id = int(update.callback_query.data.split("_")[-1])

    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()

        if not user or user.role != "driver":
            await update.callback_query.message.reply_text("‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ
        car = db.query(Car).filter(Car.id == car_id).first()

        if not car:
            await update.callback_query.message.reply_text("‚ùå –ú–∞—à–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = f"‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞!\n\nüöó –ú–∞—à–∏–Ω–∞: {car.number}"
        if car.model:
            text += f" ({car.model})"

        await update.callback_query.edit_message_text(text)

    except Exception as e:
        await update.callback_query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        db.close()
from telegram import Update
from telegram.ext import ContextTypes
from database import SessionLocal, User, Car, Shift
from keyboards import get_car_selection_keyboard, get_driver_menu
from datetime import datetime

async def delete_previous_messages(update, context):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get("last_message_id"):
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=context.user_data["last_message_id"]
            )
        if update.message:
            await update.message.delete()
    except:
        pass

async def start_shift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å —Å–º–µ–Ω—É"""
    await delete_previous_messages(update, context)
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω
        cars = db.query(Car).all()
        
        if not cars:
            message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—à–∏–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã.",
                reply_markup=get_driver_menu()
            )
            context.user_data["last_message_id"] = message.message_id
            return
        
        text = "üöó –í—ã–±–µ—Ä–∏—Ç–µ –º–∞—à–∏–Ω—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã:"
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text,
            reply_markup=get_car_selection_keyboard(cars)
        )
        context.user_data["last_message_id"] = message.message_id
        
    except Exception as e:
        message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—à–∏–Ω: {str(e)}",
            reply_markup=get_driver_menu()
        )
        context.user_data["last_message_id"] = message.message_id
    finally:
        db.close()

async def select_car(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –º–∞—à–∏–Ω—ã –¥–ª—è —Å–º–µ–Ω—ã"""
    await update.callback_query.answer()
    
    car_id = int(update.callback_query.data.split("_")[2])
    
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ
        car = db.query(Car).filter(Car.id == car_id).first()
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        
        if not car or not user:
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∞—à–∏–Ω—ã.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã —É –≤–æ–¥–∏—Ç–µ–ª—è
        active_shift = db.query(Shift).filter(
            Shift.driver_id == user.id,
            Shift.is_active == True
        ).first()
        
        if active_shift:
            await update.callback_query.edit_message_text(
                "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–º–µ–Ω–∞. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ—ë –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–π."
            )
            return
        
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–º–µ–Ω—É
        new_shift = Shift(
            driver_id=user.id,
            car_id=car.id,
            start_time=datetime.now(),
            is_active=True
        )
        
        db.add(new_shift)
        db.commit()
        
        text = f"‚úÖ –°–º–µ–Ω–∞ –Ω–∞—á–∞—Ç–∞!\n\n"
        text += f"üöó –ú–∞—à–∏–Ω–∞: {car.number}\n"
        text += f"üè≠ –ú–∞—Ä–∫–∞: {car.brand}\n"
        text += f"üöô –ú–æ–¥–µ–ª—å: {car.model}\n"
        text += f"‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {new_shift.start_time.strftime('%H:%M')}"
        
        await update.callback_query.edit_message_text(text)
        
    except Exception as e:
        await update.callback_query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã: {str(e)}")
    finally:
        db.close()
